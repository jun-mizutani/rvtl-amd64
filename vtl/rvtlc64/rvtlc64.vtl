10000 :------------------------------------------------------------
10010 : rvtlc.vtl - rvtl Compiler version 1.02
10020 : 2006/03/20-    Jun Mizutani
10030 :   2006/05/02,05/16, 2010/07/03
10040 : コンパイルするrvtlソースをハイフンの後に指定
10050 :  rvtl64 rvtlc64.vtl - to_be_compiled.vtl
10060 :  #=1
10070 : PASS1でコード生成とラベルテーブル作成
10080 : PASS2でラベルテーブルを参照してコード生成、バイナリ出力
10090 :------------------------------------------------------------
10100   Z=9999999 : #-100               : コンパイラ先頭行番号を保存
10110   D=0                             : デバッグレベル
10120   z=&                             : ヒープ先頭
10130   X=z z=z+256 X*="bin.elf"        : 出力ファイル名(後で変更)
10140   M==                             : コード領域先頭
10150   *=*+(768*1024)
10160   J=35                            : ジャンプテーブル先頭インデックス
10170   "rvtlc : rvtl compiler v.1.02 2010/03/03 (C) Jun Mizutani" / /
10180   Obj=z z=z+(256*1024)            : 256KB までのバイナリファイル
10190   H=z z=z+512                     : for ELF Header
10200   T=z z=z+300                     : control table (for,do)
10210   U=0                             : control table pointer
10220   V=z z=z+64000                   : 8000行分の行番号:アドレステーブル
10230   W=0                             : 行番号テーブル最終位置+1=登録数
10240   L=z z=z+16000                   : 1000のラベル:行番号テーブル
10250   K=0                             : ラベル:行番号テーブル最終位置+1=登録数
10260   Q=1                             : PASSカウンタ
10270   F=z z=z+8096                    : ライブラリ読み込み領域
10280   R=z z=z+8                       : パス間のコードサイズ確認
10290   !=^TimerStart
10300   !=^InitSource                   : ソースコード読み込み
10310   :-------------------
10320   H['B']=$08048000                : コード領域先頭アドレス
10330   H['A']=$08048080                : e_entry
10340   H['K']=$080A0000                : .data 領域先頭アドレス
10350   H['L']=0                        : .data 領域のサイズ(byte)
10360   H['M']=0                        : .data オフセット
10370   H['N']=H['K']+H['L']            : .bss  領域先頭アドレス
10380   H['O']=256*1024                 : ヒープ領域のサイズ(byte)
10385   H['R']=8*1024                   : .bss領域のサイズ(byte)
10390   H['U']=$4000                    : .bss領域中の変数領域オフセット
10400   H['V']=H['N']+H['U']            : .bss領域中の変数領域先頭アドレス
10410   H['W']=H['V']+$400              : .bss領域中の変数スタック先頭アドレス
10420   H['X']=H['W']+$1000             : 変数スタック最終+4
10430   !=^LibRead                      : LibRead:from rt.bin, LibRead2=INCLUDE
10440   !=^SetUpLib
10450   E=Obj+P
10460   H['C']=P                        : コード生成先頭オフセット
10470   H['P']=H['A']-H['B']            : sect_offset=e_entry-p_paddr
10480   :
10490   :-------------------
10500   : コード生成
10510   :   2PASS コンパイル
10520   :-------------------
10530   Q=1,2
10540     ;=D>0 / "----- PASS [" ?=Q "] -----" /
10550     P=H['C']                      : コード生成先頭オフセット
10560     !=^InitCode                   : 初期化コード
10570     N=M                           : Nは行先頭ポインタを最初の行に設定
10580     ;=N[1]>=Z #=-1                : 行番号チェック、compilerは処理しない
10590                                   : N[0] offset,N[1] 行番号
10600     @
10610       ;=(D>2) / /  "line:" ?=N[1] " from " ??=P
10620       ;=Q=1 !=^LineTable          : 行番号:アドレスの登録
10630       ;=(Q=2)&(D>2) !=^LineCheck
10640       C=N+8                       : 行テキスト先頭
10650       S=N[0]-8                    : 行長
10660       !=^ParseLine
10670       N=N+N[0]                    : 次行先頭
10680     @=((N[0]<0)+(N[1]>=Z))        : 最後の行まで処理したか?
10690     R[Q-1]=P
10700   @=Q+1
10710   :-------------------------
10720   : コード生成の終了
10730   :-------------------------
10740   :
10750   !=^ExitCode
10760   :
10770   :---------------------
10780   : ELFの作成
10790   :---------------------
10800   H['Z']=P                        : section size
10810   !=^DataSection
10820   !=^SectionStr
10830   !=^SectionHeader
10840   Obj[17]=H['Z']+H['P']           : p_filesz
10850   Obj[18]=H['Z']+H['P']           : p_memsz
10860   :---------------------
10870   : ファイル出力
10880   :---------------------
10890   !=^BinWrite
10900   :---------------------
10910   : 終了
10920   :---------------------
10930   ;=D>0 / "Line" /
10940   ;=D>0 !=^PrintLine
10950   ;=D>0 / "Label" /
10960   ;=D>0 !=^PrintLabel /
10970   ;=R[0]<>R[1] " Pass1 " ?=R[0] / "<> Pass2 " ?=R[1] /
10980   " header size      " ?=H['A']-H['B'] /
10990   " library size     " ?=F[34]*4 /
11000   " code size        " ?=R[1]-(F[34]*4) /
11010   " code starts from 0x" ??=H['B']+(F[34]*4) /
11020   " code ends at     0x" ??=H['B']+R[1]-1 /
11030   " Source Lines     " ?=W /
11040   " Source Labels    " ?=K /
11050   " File Name        " $*=X /
11060   " File Size        " ?=P /
11070   " heap size        free : " ?=*-R-8 " / " ?=*-& " bytes" /
11080   " To check code, run : "
11090   "objdump -d --start-address=0x" ??=H['B']+(F[34]*4) " " $*=X /
11100   !=^TimerStop
11110 #=-1
11120 :
11130 :----------------------------------------------------------
11140 : 初期化コード  2010/03/01
11150 :----------------------------------------------------------
11160 ^InitCode
11170    E=Obj+P
11180    +=$BE !=^PutObj1               : .bss 変数領域先頭アドレス
11190    +=H['K']+H['U'] !=^PutObj4     : MOV ESI, BSSアドレス
11200    +=0 !=^CallLib                 : Call Init
11210    : 0 を渡して brk の現在値を得る
11220    +=$DB31  !=^PutObj2            : XOR EBX, EBX
11230    +=$B8    !=^PutObj1            : MOV EAX, SYS_brk(45)
11240    +=45     !=^PutObj4
11250    +=$80CD  !=^PutObj2            : INT 0x80
11260    +=$B3    !=^PutObj1            : MOV BL, ',' ; RAM先頭設定
11270    +=','    !=^PutObj1
11280    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], EAX
11290    +=$9E04  !=^PutObj2
11300    +=$B3    !=^PutObj1            : MOV BL, '&' ; RAM先頭設定
11310    +='&'    !=^PutObj1
11320    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], EAX
11330    +=$9E04  !=^PutObj2
11340    +=$B3    !=^PutObj1            : MOV BL, '=' ; RAM先頭設定
11350    +='='    !=^PutObj1
11360    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], EAX
11370    +=$9E04  !=^PutObj2
11380    +=$C389  !=^PutObj2            : MOV EBX, EAX
11390    +=$C381  !=^PutObj2
11400    +=H['O'] !=^PutObj4            : ADD EBX, ヒープサイズ
11410    +=$B8    !=^PutObj1            : MOV EAX, SYS_brk(45)
11415    +=45     !=^PutObj4
11420    +=$80CD  !=^PutObj2            : INT 0x80
11425    +=$B1    !=^PutObj1            : MOV CL, '*' ; RAM末設定
11430    +='*'    !=^PutObj1
11440    +=$89    !=^PutObj1            : MOV [ESI+ECX*4], EBX
11450    +=$8E1C  !=^PutObj2
11460    +=$BF    !=^PutObj1            : MOV EDI,変数スタック最終
11470    +=H['X']-4 !=^PutObj4
11480 ]
11490 :
11500 :----------------------------------------------------------
11510 : 終了コード
11520 :----------------------------------------------------------
11530 ^ExitCode
11540    +=29 !=^CallLib                : RESTORE_TERMIOS
11550    +=1  !=^CallLib                : Exit
11560 ]
11570 :
11580 :----------------------------------------------------------
11590 : 行番号:アドレステーブルの登録
11600 :----------------------------------------------------------
11610 ^LineTable
11620    ;=Q>1 ]                        : PASS1のみ
11630    V[W*2]=N[1]                    : 行番号
11640    V[W*2+1]=H['B']+P              : コードアドレス
11650    W=W+1
11660 ]
11670 :
11680 :----------------------------------------------------------
11690 : 行番号:アドレステーブルの整合性確認
11700 :----------------------------------------------------------
11710 ^LineCheck
11720    +w
11730    w=0
11740    @
11750      ;=V[w*2]<>N[1] #=^skipLC
11760      ;=V[w*2+1]=(H['B']+P) #=^skipLC
11770      ?(6)=N[1] ":" ??=V[w*2+1] "-" ??=(H['B']+P) " = "
11780      ?=V[w*2+1]-(H['B']+P) /
11790     ^skipLC
11800      w=w+1
11810    @=(w>=W)
11820    -w
11830 ]
11840 :
11850 :----------------------------------------------------------
11860 : 1行の処理
11870 : C : 行テキスト先頭アドレス
11880 : S : 行長 (paddingを含む)
11890 :----------------------------------------------------------
11900 :
11910 ^ParseLine
11920   I=0
11930   @
11940     c=C(I)                        : 1文字を取り出す
11950     ;=(c<>' ')&(c<>0) !=^Command  : 1命令の処理
11960     ;=C(I)<>0 I=I+1               : 次の文字
11970   @=((C(I)=0)|(I>S))              : 行末まで繰返す
11980 ]
11990 :
12000 :-------------------------------------------------
12010 : ライブラリロード
12020 : F : ライブラリ先頭
12030 : G : ライブラリサイズ
12040 :-------------------------------------------------
12050 ^LibRead
12055    |ve ;=%<0 !=^GetLib ]          : from memory
12060    +bz
12070    b=z z=z+256
12080    {=F
12090    b*="rt.bin"                    : from file
12100    )*=b                           : read library
12110    G=}-{
12115    "Get library " ?=G " bytes from 'rt.bin'." /
12120    -zb
12130 ]
12140 :
12150 :-------------------------------------------------
12160 : 実行ファイル出力
12170 : E : binary 先頭
12180 : P : ファイルサイズ
12190 :-------------------------------------------------
12200 ^BinWrite
12210    +bfz
12220    b=z z=z+256
12230    {=Obj }=Obj+P
12240    b*=X
12250    (*=b                           : write executable
12260    / "file : " $*=b " " ?=P " bytes " /
12270    f=b f*=" 755 " f=f+% f*=X
12280    |cm*=b
12290    -zfb
12300 ]
12310 :
12320 :----------------------------------------------------------
12330 : ソースから数値を取得 10進  結果:r
12340 :----------------------------------------------------------
12350 ^GetNo
12360    +f
12370    r=0 f=0
12380    c=C(I)
12390    ;=(c='$') #=^GetHex
12400    ;=(c='-') f=1 I=I+1 c=C(I)
12410    @
12420      ;=(c>='0')&(c<='9') r=r*10+(c-'0') I=I+1 c=C(I)
12430    @=((c<'0')|(c>'9'))
12440    ;=D>2 / "getNo:" ?=r /
12450    ;=f>0 r=-r
12460    -f
12470 ]
12480 :
12490 :----------------------------------------------------------
12500 : ソースから数値を取得 16進  結果:r
12510 :----------------------------------------------------------
12520 ^GetHex
12530    I=I+1
12540    c=C(I)
12550    r=0
12560    @
12570      f=1
12580      ;=(c>='0')&(c<='9') r=r*16+(c-'0') I=I+1 c=C(I) f=0
12590      ;=(c>='A')&(c<='F') r=r*16+(c-'A'+10) I=I+1 c=C(I) f=0
12600      ;=(c>='a')&(c<='f') r=r*16+(c-'a'+10) I=I+1 c=C(I) f=0
12610    @=(f=1)
12620    ;=D>2 / "getHex:" ??=r /
12625    -f  : 2010/03/01
12630 ]
12640 :
12650 :----------------------------------------------------------
12660 : コード 1 バイト出力
12670 :----------------------------------------------------------
12680 ^PutObj1
12690    E=Obj+P
12700    E(0)=;
12710    ;=D>4  / "putobj1 " ??=P " : " ?$=E(0)
12720    P=P+1
12730 ]
12740 :
12750 :----------------------------------------------------------
12760 : コード 2 バイト出力
12770 :----------------------------------------------------------
12780 ^PutObj2
12790    E=Obj+P
12800    E{0}=;
12810    ;=D>4 / "putobj2 " ??=P " : " ?#=E{0}
12820    P=P+2
12830 ]
12840 :
12850 :----------------------------------------------------------
12860 : コード 4 バイト出力
12870 :----------------------------------------------------------
12880 ^PutObj4
12890    E=Obj+P
12900    E[0]=;
12910    ;=D>4 / "putobj4 " ??=P " : " ??=E[0]
12920    P=P+4
12930 ]
12940 :
12950 :----------------------------------------------------------
12960 : コード 4 バイト出力 (相対アドレス)
12970 :----------------------------------------------------------
12980 ^PutAddr
12990    E=Obj+P
13000    E[0]=;-(P+4+H['B'])
13010    ;=D>4 / "putaddr " ??=P " : " ??=E[0]
13020    P=P+4
13030 ]
13040 :
13050 :----------------------------------------------------------
13060 : call library
13070 : stack top:lib#
13080 : ex. +=12 !=^CallLib (PrintOctal)
13090 : 00 Init            25 READ_LINE3       50 DispFile
13100 : 01 Exit            26 READ_LINE        51 FGetArg
13110 : 02 ExitN           27 GET_TERMIOS      52 fbdev_open
13120 : 03 OutString       28 SET_TERMIOS      53 fbdev_close
13130 : 04 OutPString      29 RESTORE_TERMIOS  54 fb_get_fscreen
13140 : 05 OutAsciiZ       30 RealKey          55 fb_get_screen
13150 : 06 StrLen          31 WinSize          56 fb_set_screen
13160 : 07 OutChar         32 fropen           57 fb_copy_scinfo
13170 : 08 OutChar4        33 fwopen           58 fb_map_screen
13180 : 09 NewLine         34 fclose           59 fb_unmap_screen
13190 : 10 BackSpace       35 sgenrand         60 fb_get_colormap
13200 : 11 PrintBinary     36 genrand          61 fb_set_colormap
13210 : 12 PrintOctal      37 GetTimed         62 fb_test_colormap
13220 : 13 PrintHex2       38 USleep           63 fb_restore_sc
13230 : 14 PrintHex4       39 ForkExec         64 fb_restore_cmap
13240 : 15 PrintHex8       40 GetString2       65 LineDraw
13250 : 16 PrintHex        41 CopyString       66 Dot
13260 : 17 PrintLeftU      42 NumInput         67 PatternTransfer
13270 : 18 PrintLeft       43 StringInput      68 PatternTransfer2
13280 : 19 PrintRight0     44 GetArg           69 MPatternTransfer
13290 : 20 PrintRightU     45 GetEnv           70 PatternFill
13300 : 21 PrintRight      46 FileWrite        71 FrameBufferFill
13310 : 22 InChar          47 FileSize         72 MemCopy
13320 : 23 InputLine0      48 FileRead         73 OpenFB
13330 : 24 READ_LINE2      49 URL_Decode       74 Oct2Bin
13340 :----------------------------------------------------------
13350 ^CallLib
13360    w=;
13370    ;=D>3 / "CALL <" ?=w ">" /
13380    +=$E8 !=^PutObj1               : call
13390    +=Obj[w+J]
13400    !=^PutAddr
13410 ]
13420 :
13430 :----------------------------------------------------------
13440 : EBX(式の結果)を退避
13450 :----------------------------------------------------------
13460 ^XchgAXBX
13470    ;=Obj(P-1)=$93 P=P-1 ]         : if XCHG  EAX,EBX
13480    +=$93 !=^PutObj1               : XCHG  EAX,EBX
13490 ]
13500 :
13510 :----------------------------------------------------------
13520 : EBX(式の結果)を退避 PUSH EBX
13530 :----------------------------------------------------------
13540 ^PushBX
13550    ;=Obj(P-1)=$5B P=P-1 ]         : if POP EBX
13560    +=$53 !=^PutObj1               : PUSH EBX
13570 ]
13580 :
13590 :----------------------------------------------------------
13600 : EBX(式の結果)を復帰 POPH EBX
13610 :----------------------------------------------------------
13620 ^PopBX
13630    +=$5B !=^PutObj1               : PUSH EBX
13640 ]
13650 :
13660 :----------------------------------------------------------
13670 : 1行入力 =$$ バッファ先頭アドレスを返す
13680 :----------------------------------------------------------
13690 ^LineInput
13700    ;=D>1 "<LineInput>"
13710    I=I+1
13720    !=^PushBX
13730    : eax:バッファサイズ, ebx:バッファ先頭
13740    : eax に入力文字数を返す
13750    +=43     !=^CallLib            : StringInput
13760    +=$C931  !=^PutObj2            : XOR ECX,ECX
13770    !=^XchgAXBX                    : eax バッファ先頭
13780    +=$B1    !=^PutObj1            : MOV CL, '%'
13790    +='%'    !=^PutObj1
13800    +=$89    !=^PutObj1            : MOV [ESI+ECX*4],EBX
13810    +=$8E1C  !=^PutObj2
13820    !=^PopBX
13830 ]
13840 :
13850 :----------------------------------------------------------
13860 : 1文字入力 =$
13870 :----------------------------------------------------------
13880 ^CharInput
13890    ;=D>1 "<CharInput>"
13900    +=22 !=^CallLib                : CALL InChar
13910 ]
13920 :
13930 :----------------------------------------------------------
13940 : 項 数値
13950 :----------------------------------------------------------
13960 ^TermNum
13970    +r
13980    ;=(c='$')&(C(I)='$') !=^LineInput -r ]
13990    ;=(c='$')&((C(I)=' ')|(C(I)=0)) !=^CharInput -r ]
14000    ;=D>1 "<Num>"
14010    I=I-1
14020    !=^GetNo
14030    ;=C(I-1)='$' ]
14040    +=$B8 !=^PutObj1               : MOV  EAX,r
14050    +=r !=^PutObj4
14060    -r
14070 ]
14080 :
14090 :----------------------------------------------------------
14100 : 項 1文字
14110 :----------------------------------------------------------
14120 ^TermChar
14130    +r
14140    ;=D>1 "<Char>"
14150    r=0
14160    @
14170      c=C(I)
14180      ;=c<>$27 r=r<<8+c
14190      I=I+1
14200    @=(c=$27)
14210    +=$B8 !=^PutObj1               : MOV  EAX,r
14220    +=r !=^PutObj4
14230    -r
14240 ]
14250 :
14260 :----------------------------------------------------------
14270 : 項 括弧
14280 :----------------------------------------------------------
14290 ^TermBracket
14300    ;=D>1 " ("
14310    !=^PushBX
14320    !=^Expression
14330    !=^XchgAXBX
14340    !=^PopBX
14350    ;=D>1 ") "
14360    ;=(C(I)<>')') !=^Com_Error : ERROR_CLOSE_BRACKET
14370    I=I+1
14380 ]
14390 :
14400 :----------------------------------------------------------
14410 : 項 乱数
14420 :----------------------------------------------------------
14430 ^TermRandom
14440    ;=D>1 "<Rand>"
14450    +=36 !=^CallLib                : CALL genrand
14460 ]
14470 :
14480 :----------------------------------------------------------
14490 : 項 負
14500 :----------------------------------------------------------
14510 ^TermNeg
14520    ;=D>1 "<Neg>"
14530    !=^Term
14540    +=$D8F7 !=^PutObj2             : NEG EAX
14550 ]
14560 :
14570 :----------------------------------------------------------
14580 : 項 絶対値
14590 :----------------------------------------------------------
14600 ^TermAbs
14610    ;=D>1 "<Abs>"
14620    !=^Term
14630    +=$C009 !=^PutObj2             : OR EAX,EAX
14640    +=$027D !=^PutObj2             : JAE  02
14650    +=$D8F7 !=^PutObj2             : NEG EAX
14660 ]
14670 :
14680 :----------------------------------------------------------
14690 :  項 数値入力
14700 :----------------------------------------------------------
14710 ^TermInput
14720    ;=D>1 "<NumInput>"
14730    !=^PushBX
14740    +=42 !=^CallLib                : CALL NumInput
14750    !=^XchgAXBX                    : eax = number
14760    !=^PopBX
14770 ]
14780 :
14790 :----------------------------------------------------------
14800 : 項 リアルタイム文字入力
14810 :----------------------------------------------------------
14820 ^TermRealKey
14830    ;=D>1 "<RealKey>"
14840    +=30 !=^CallLib                : CALL RealKey
14850 ]
14860 :
14870 :----------------------------------------------------------
14880 : 項 変数スタック Pop
14890 :----------------------------------------------------------
14900 ^TermPop
14910    ;=D>1 "<pop>"
14920    +=$C781 !=^PutObj2             : ADD EDI,4
14930    +=04    !=^PutObj4
14940    +=$078B !=^PutObj2             : MOV EAX,[EDI]
14950 ]
14960 :
14970 :----------------------------------------------------------
14980 : 項 ラベル     ラベル文字列 最大11文字まで
14990 :----------------------------------------------------------
15000 ^TermLabel
15010    +nr
15020    ;=D>1 "<Label>"
15030    r=0
15040    ;=Q=1 @ I=I+1 @=((C(I)=' ')|(C(I)=0))
15050    ;=Q>1 !=^SearchLabel n=r+1     : ラベルの次行を探す
15060    ;=r<0 / "Label not Found!" !=^Com_Error
15070    ;=Q>1 !=^SearchLine
15080    +=$B8 !=^PutObj1               : MOV  EAX,r
15090    +=r !=^PutObj4
15100    -rn
15110 ]
15120 :
15130 :----------------------------------------------------------
15140 : 項 ウィンドウサイズ
15150 :----------------------------------------------------------
15160 ^TermWinSize
15170    ;=D>1 "<WinSize>"
15180    +=31 !=^CallLib                : WinSize
15190 ]
15200 :
15210 :----------------------------------------------------------
15220 : 項 時間
15230 :----------------------------------------------------------
15240 ^TermTime
15250    ;=D>1 "<Time>"
15260    +=37 !=^CallLib                : GetTime
15270    +=$C889  !=^PutObj2            : MOV EAX,ECX
15280    +=$C931  !=^PutObj2            : XOR ECX,ECX
15290    +=$B1    !=^PutObj1            : MOV CL, '%'
15300    +='%'    !=^PutObj1
15310    +=$89    !=^PutObj1            : MOV [ESI+ECX*4], EDX
15320    +=$8E14  !=^PutObj2
15330 ]
15340 :
15350 :----------------------------------------------------------
15360 : 項 コマンドライン引数
15370 :----------------------------------------------------------
15380 ^TermArg
15390    ;=(c='\')&(C(I)='\') !=^TermEnv ]
15400    +r
15410    ;=D>1 "<Arg>"
15420    !=^PushBX
15430    !=^Expression
15440    +=$43    !=^PutObj1            : INC EBX (argv[1]から)
15450    +=44     !=^CallLib            : GetArg
15460    !=^PopBX
15470    -r
15480 ]
15490 :
15500 :----------------------------------------------------------
15510 : 項 環境変数
15520 :----------------------------------------------------------
15530 ^TermEnv
15540    ;=D>1 "<Env>"
15550    I=I+1
15560    +r
15570    !=^PushBX
15580    !=^Expression
15590    +=45     !=^CallLib            : GetEnv
15600    !=^PopBX
15610    -r
15620 ]
15630 :
15640 :----------------------------------------------------------
15650 : 配列 1バイト : 値を EAX に返す
15660 :----------------------------------------------------------
15670 ^Array1
15680    +c
15690    ;=D>1 "<Array1>"
15700    !=^PushBX
15710    !=^Expression
15720    -c
15730    +=$8E8B  !=^PutObj2
15740    +=c*4    !=^PutObj4             : MOV ECX,[ESI+c*4]
15750    +=$C031  !=^PutObj2             : XOR EAX, EAX
15760    +=$8A    !=^PutObj1
15770    +=$1904  !=^PutObj2             : MOV AL,[ECX+EBX*4]
15780    !=^PopBX
15790    I=I+1
15800 ]
15810 :
15820 :----------------------------------------------------------
15830 : 配列 2バイト : 値を EAX に返す
15840 :----------------------------------------------------------
15850 ^Array2
15860    +c
15870    ;=D>1 "<Array2>"
15880    !=^PushBX
15890    !=^Expression
15900    -c
15910    +=$8E8B  !=^PutObj2
15920    +=c*4    !=^PutObj4             : MOV ECX,[ESI+c*4]
15930    +=$C031  !=^PutObj2             : XOR EAX, EAX
15940    +=$8B66  !=^PutObj2
15950    +=$5904  !=^PutObj2             : MOV AX,[ECX+EBX*4]
15960    !=^PopBX
15970    I=I+1
15980 ]
15990 :
16000 :----------------------------------------------------------
16010 : 配列 4バイト : 値を EAX に返す
16020 :----------------------------------------------------------
16030 ^Array4
16040    +c
16050    ;=D>1 "<Array4>"
16060    !=^PushBX
16070    !=^Expression
16080    -c
16090    +=$8E8B  !=^PutObj2
16100    +=c*4    !=^PutObj4             : MOV ECX,[ESI+c*4]
16110    +=$8B    !=^PutObj1
16120    +=$9904  !=^PutObj2             : MOV EAX,[ECX+EBX*4]
16130    !=^PopBX
16140    I=I+1
16150 ]
16160 :
16170 :----------------------------------------------------------
16180 : 変数の冗長部分の読み飛ばし
16190 :   英文字以外の最初の文字がIに返る
16200 :----------------------------------------------------------
16210 ^SkipAlfa
16220    +c
16230    I=I-1
16240    @
16250      I=I+1 c=C(I)
16260    @=(((c<'A')+(c>'Z'))&((c<'a')+(c>'z')))
16270    -c
16280 ]
16290 :
16300 :----------------------------------------------------------
16310 : 変数項 : 値を EAX に返す cに変数名
16320 :----------------------------------------------------------
16330 ^TermVar
16340    +d
16350    ;=D>1 "<Var>"
16360    !=^SkipAlfa
16370    d=C(I)
16380    ;=(d='(') I=I+1 !=^Array1 #=^var     : Array 1 byte
16390    ;=(d='{') I=I+1 !=^Array2 #=^var     : Array 2 byte
16400    ;=(d='[') I=I+1 !=^Array4 #=^var     : Array 4 byte
16410    +=$868B !=^PutObj2             : Simple Var
16420    +=c*4 !=^PutObj4               : MOV EAX,[ESI + c]
16430  ^var
16440    : I=I+1
16450    -d
16460 ]
16470 :
16480 :----------------------------------------------------------
16490 :  項の処理
16500 :  値を eax に返す。ebx を保存する必要がある
16510 :----------------------------------------------------------
16520 ^Term
16530    ;=D>1 "<Term>"
16540    c=C(I) I=I+1
16550    ;=((c>='0')&(c<='9'))+(c='$') !=^TermNum #=^TermExit
16560    ;=(c=$27) !=^TermChar    #=^TermExit  : '
16570    ;=(c='(') !=^TermBracket #=^TermExit
16580    ;=(c='`') !=^TermRandom  #=^TermExit
16590    ;=(c='-') !=^TermNeg     #=^TermExit
16600    ;=(c='+') !=^TermAbs     #=^TermExit
16610    ;=(c='@') !=^TermRealKey #=^TermExit
16620    ;=(c=';') !=^TermPop     #=^TermExit
16630    ;=(c='^') !=^TermLabel   #=^TermExit
16640    ;=(c='.') !=^TermWinSize #=^TermExit
16650    ;=(c='_') !=^TermTime    #=^TermExit
16660    ;=(c='?') !=^TermInput   #=^TermExit
16670    ;=(c='\') !=^TermArg     #=^TermExit
16680    !=^TermVar : その他の変数，配列参照
16690 ^TermExit
16700 ]
16710 :
16720 :----------------------------------------------------------
16730 :  式 加算
16740 :----------------------------------------------------------
16750 ^ExpAdd
16760    ;=D>1 "<+>"
16770    !=^Term                        : 2nd term --> EAX
16780    +=$C301 !=^PutObj2             : ADD EBX,EAX
16790 ]
16800 :
16810 :----------------------------------------------------------
16820 :  式 減算
16830 :----------------------------------------------------------
16840 ^ExpSub
16850    ;=D>1 "<->"
16860    !=^Term                        : 2nd term --> EAX
16870    +=$C329 !=^PutObj2             : SUB EBX,EAX
16880 ]
16890 :
16900 :----------------------------------------------------------
16910 :  式 乗算
16920 :----------------------------------------------------------
16930 ^ExpMul
16940    ;=D>1 "<*>"
16950    !=^Term                        : 2nd term --> EAX
16960    !=^XchgAXBX
16970    +=$EBF7 !=^PutObj2             : IMUL EBX
16980    !=^XchgAXBX
16990 ]
17000 :
17010 :----------------------------------------------------------
17020 :  式 除算
17030 :----------------------------------------------------------
17040 ^ExpDiv
17050    ;=D>1 "</>"
17060    !=^Term                        : 2nd term --> EAX
17070    !=^XchgAXBX
17080    +=$99    !=^PutObj1            : CDQ
17090    +=$FBF7  !=^PutObj2            : IDIV EBX
17100    +=$C931  !=^PutObj2            : XOR ECX,ECX
17110    +=$B1    !=^PutObj1            : MOV CL, '%'
17120    +='%'    !=^PutObj1
17130    +=$89    !=^PutObj1            : MOV [ESI+ECX*4], EDX
17140    +=$8E14  !=^PutObj2
17150    !=^XchgAXBX
17160 ]
17170 :
17180 :----------------------------------------------------------
17190 :  式 無符号除算 \
17200 :----------------------------------------------------------
17210 ^ExpUDiv
17220    ;=D>1 "<\>"
17230    !=^Term                        : 2nd term --> EAX
17240    !=^XchgAXBX
17250    +=$D231  !=^PutObj2            : XOR EDX,EDX
17260    +=$F3F7  !=^PutObj2            : DIV EBX
17270    +=$C931  !=^PutObj2            : XOR ECX,ECX
17280    +=$B1    !=^PutObj1            : MOV CL, '%'
17290    +='%'    !=^PutObj1
17300    +=$89    !=^PutObj1            : MOV [ESI+ECX*4], EDX
17310    +=$8E14  !=^PutObj2
17320    !=^XchgAXBX
17330 ]
17340 :
17350 :----------------------------------------------------------
17360 :  式 OR
17370 :----------------------------------------------------------
17380 ^ExpOr
17390    ;=D>1 "<|>"
17400    !=^Term    : 2nd term --> EAX
17410    +=$C309 !=^PutObj2             : OR EBX, EAX
17420 ]
17430 :
17440 :----------------------------------------------------------
17450 :  式 AND
17460 :----------------------------------------------------------
17470 ^ExpAnd
17480    ;=D>1 "<&>"
17490    !=^Term                        : 2nd term --> EAX
17500    +=$C321 !=^PutObj2             : AND EBX,EAX
17510 ]
17520 :
17530 :----------------------------------------------------------
17540 :  式 XOR
17550 :----------------------------------------------------------
17560 ^ExpXor
17570    ;=D>1 "<^>"
17580    !=^Term                        : 2nd term --> EAX
17590    +=$C331 !=^PutObj2             : XOR EBX,EAX
17600 ]
17610 :
17620 :----------------------------------------------------------
17630 :  比較演算子
17640 :    >, >=, <, <=, <>, =
17650 :    ebx と eax を比較して値を ebx に返すコードを生成
17660 :----------------------------------------------------------
17670 ^OpRelative
17680    -w
17690    +=$C339 !=^PutObj2             : CMP EBX,EAX
17700    +=$BB   !=^PutObj1             : MOV EBX,0001
17710    +=$0001 !=^PutObj4
17720    +=w     !=^PutObj1             : Jcc 02 (skip xor)
17730    +=$02   !=^PutObj1
17740    +=$DB31 !=^PutObj2             : XOR EBX,EBX
17750 ]
17760 :
17770 :----------------------------------------------------------
17780 :  式 比較 等しい
17790 :----------------------------------------------------------
17800 ^ExpEqu
17810    ;=D>1 "<=>"
17820    !=^Term
17830    +=$74
17840    !=^OpRelative                  : JZ
17850 ]
17860 :
17870 :----------------------------------------------------------
17880 :  式 比較 より小さい <, <=, <<, <>
17890 :----------------------------------------------------------
17900 ^ExpLess
17910    ;=D>1 "<<->"
17920    c=C(I)
17930    ;=(c='>') I=I+1 !=^Term +=$75 !=^OpRelative ] : JNZ
17940    ;=(c='=') I=I+1 !=^Term +=$7E !=^OpRelative ] : JLE
17950    ;=(c='<') I=I+1 !=^Term !=^ShiftLeft ]
17960    !=^Term +=$7C !=^OpRelative    : JL
17970 ]
17980 :
17990 :----------------------------------------------------------
18000 :  式 右シフト >>
18010 :----------------------------------------------------------
18020 ^ShiftRight
18030     +=$C189 !=^PutObj2            : MOV ECX, EAX
18040     +=$80   !=^PutObj1            : CMP CL, 32
18050     +=$20F9 !=^PutObj2
18060     +=$7E   !=^PutObj1            : JLE 02
18070     +=$02   !=^PutObj1
18080     +=$DB31 !=^PutObj2            : XOR EBX,EBX
18090     +=$EBD3 !=^PutObj2            : SHR EBX,CL
18100 ]
18110 :
18120 :----------------------------------------------------------
18130 :  式 左シフト <<
18140 :----------------------------------------------------------
18150 ^ShiftLeft
18160     +=$C189 !=^PutObj2            : MOV ECX, EAX
18170     +=$80   !=^PutObj1            : CMP CL, 32
18180     +=$20F9 !=^PutObj2
18190     +=$7E   !=^PutObj1            : JLE 02
18200     +=$02   !=^PutObj1
18210     +=$DB31 !=^PutObj2            : XOR EBX,EBX
18220     +=$E3D3 !=^PutObj2            : SHL EBX, CL
18230 ]
18240 :
18250 :----------------------------------------------------------
18260 :  式 比較 より大きい >, >=, >>
18270 :----------------------------------------------------------
18280 ^ExpGreater
18290    ;=D>1 "<>->"
18300    c=C(I)
18310    ;=(c='=') I=I+1 !=^Term +=$7D !=^OpRelative ]   : JGE xx
18320    ;=(c='>') I=I+1 !=^Term !=^ShiftRight ]
18330    !=^Term +=$7F !=^OpRelative    : JG  xx
18340 ]
18350 :
18360 :----------------------------------------------------------
18370 :  式の処理                   項 + 項
18380 :  前の項の値を ebx にコピーし、eax に変える次の項の値と演算、
18390 :  結果を ebx に返すコードを生成
18400 :----------------------------------------------------------
18410 ^Expression
18420    ;=D>1 "<Expr>"
18430    +f
18440    !=^Term               : 1st term --> AX
18450    !=^XchgAXBX           : BX <-----> AX
18460    f=0
18470    @
18480      c=C(I) I=I+1
18490      ;=(c='+') !=^ExpAdd   #=^exp
18500      ;=(c='-') !=^ExpSub   #=^exp
18510      ;=(c='*') !=^ExpMul   #=^exp
18520      ;=(c='/') !=^ExpDiv   #=^exp
18530      ;=(c='=') !=^ExpEqu   #=^exp
18540      ;=(c='|') !=^ExpOr    #=^exp
18550      ;=(c='&') !=^ExpAnd   #=^exp
18560      ;=(c='^') !=^ExpXor   #=^exp
18570      ;=(c='\') !=^ExpUDiv  #=^exp
18580      ;=(c='<') !=^ExpLess  #=^exp
18590      ;=(c='>') !=^ExpGreater  #=^exp
18600      I=I-1
18610      f=1       : end of expresion
18620      ^exp
18630    @=(f)
18640    -f
18650 ]
18660 :
18670 :----------------------------------------------------------
18680 : 1命令の処理
18690 :----------------------------------------------------------
18700 ^Command
18710   c=C(I) I=I+1
18720   d=c
18730   ;=D>1 / "<com [" $=d "]>"
18740   c=C(I)  : 1文字先読み
18750   ;=d='!' #=^Com_GOSUB    : 21  !  GOSUB
18760   ;=d='"' #=^Com_String   : 22  "  文字列出力
18770   ;=d='#' #=^Com_GO       : 23  #  GOTO 実行中の行番号を保持
18780   ;=d='$' #=^Com_OutChar  : 24  $  文字コード出力
18790   ;=d='%' #=^Com_Var      : 25  %  直前の除算の剰余または usec を保持
18800   ;=d='&' #=^Com_Error    : 26  &  NEW, VTLコードの最終使用アドレスを保持
18810   ;=d=$27 #=^Com_Error    : 27  '  文字定数
18820   ;=d='(' #=^Com_FileWrite :28  (  File 書き出し
18830   ;=d=')' #=^Com_FileRead : 29  )  File 読み込み, 読み込みサイズ保持
18840   ;=d='*' #=^Com_BRK      : 2A  *  メモリ最終(brk)を設定, 保持
18850   ;=d='+' #=^Com_VarPush  : 2B  +  ローカル変数PUSH, 加算演算子, 絶対値
18860   ;=d=',' #=^Com_Exec     : 2C  ,  fork & exec
18870   ;=d='-' #=^Com_VarPop   : 2D  -  ローカル変数POP,減算演算子,負の十進数
18880   ;=d='.' #=^Com_Space    : 2E  .  空白出力
18890   ;=d='/' #=^Com_NewLine  : 2F  /  改行出力, 除算演算子
18900   ;=d=':' #=^Com_Comment  : 3A  :  行末まで注釈
18910   ;=d=';' #=^Com_IF       : 3B  ;  IF
18920   ;=d='<' #=^Com_Error    : 3C  <  rvtlコードのファイル出力
18930   ;=d='=' #=^Com_Error    : 3D  =  コード先頭アドレス
18940   ;=d='>' #=^Com_Error    : 3E  >  rvtlコードのファイル入力
18950   ;=d='?' #=^Com_OutNum   : 3F  ?  数値出力  数値入力
18960   ;=d='@' #=^Com_DO       : 40  @  DO UNTIL NEXT
18970   ;=d='\' #=^Com_Ext      : 5C  \  拡張用  除算演算子(unsigned)
18980   ;=d=']' #=^Com_Return   : 5D  ]  RETURN
18990   ;=d='^' #=^Com_Label    : 5E  ^  ラベル宣言, 排他OR演算子, ラベル参照
19000   ;=d='_' #=^Com_USleep   : 5F  _  usleep, gettimeofday
19010   ;=d='`' #=^Com_RANDOM   : 60  `  擬似乱数を保持 (乱数シード設定)
19020   ;=d='{' #=^Com_FileTop  : 7B  {  ファイル先頭(ヒープ領域)
19030   ;=d='|' #=^Com_Function : 7C  |  組み込みコマンド, エラーコード保持
19040   ;=d='}' #=^Com_FileEnd  : 7D  }  ファイル末(ヒープ領域)
19050   ;=d='~' #=^Com_Exit     : 7E  ~  VTL終了
19060   ;=(d>='A')*(d<='z') #=^Com_Var
19070   #=^Com_Error
19080 ]
19090 ^NextCom
19100 :
19110 ]
19120 :----------------------------------------------------------
19130 : 代入文
19140 :----------------------------------------------------------
19150 ^Com_Var
19160    ;=D>1 "<Com_Var>"
19170    !=^SkipAlfa
19180    v=d                            : variable
19190    ;=C(I)='=' !=^SimpleVar  #=^NextCom
19200    ;=C(I)='*' !=^CopyString #=^NextCom
19210    ;=C(I)='(' !=^SetArray1  #=^NextCom
19220    ;=C(I)='{' !=^SetArray2  #=^NextCom
19230    ;=C(I)='[' !=^SetArray4  #=^NextCom
19240    !=^Com_Error
19250  #=^NextCom
19260 :
19270 ^SimpleVar
19280    I=I+1                          : skip =
19290    !=^Expression
19300    +=$9E89 !=^PutObj2             : MOV [ESI+v*4],EBX
19310    +=v*4   !=^PutObj4
19320    ;=C(I)=',' !=^ForCmd           : FOR statement
19330 ]
19340 :
19350 ^CopyString
19360    I=I+2                          : skip *=
19370    ;=C(I)='"' #=^CopyString2
19380    !=^Expression
19390    +=$868B  !=^PutObj2            : MOV EAX, [ESI+v*4]
19400    +=v*4    !=^PutObj4
19410    !=^XchgAXBX                    : EBX <--> EAX
19420    +=$B9    !=^PutObj1            : MOV ECX, 256K
19430    +=256*1024 !=^PutObj4
19440    +=41     !=^CallLib            : call CopyString
19450    +=$DB31  !=^PutObj2            : XOR EBX,EBX
19460    +=$B3    !=^PutObj1            : MOV BL, '%'
19470    +='%'    !=^PutObj1
19480    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], ECX
19490    +=$9E0C  !=^PutObj2
19500 ]
19510 ^CopyString2
19520    I=I+1                          : skip =
19530    +=$9E8B  !=^PutObj2            : MOV EBX, [ESI+v*4]
19540    +=v*4    !=^PutObj4
19550    !=^GetString                   : eax : string top address
19560    +=$B9    !=^PutObj1            : MOV ECX, 126
19570    +=126    !=^PutObj4
19580    +=41     !=^CallLib            : call CopyString
19590    +=$DB31  !=^PutObj2            : XOR EBX,EBX
19600    +=$B3    !=^PutObj1            : MOV BL, '%'
19610    +='%'    !=^PutObj1
19620    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], ECX
19630    +=$9E0C  !=^PutObj2
19640 ]
19650 :
19660 ^SetArray1
19670    I=I+1
19680    !=^Expression                  : index
19690    +=$53    !=^PutObj1            : PUSH EBX
19700    I=I+2                          : skip ')='
19710    !=^Expression
19720    !=^XchgAXBX
19730    +=$5B    !=^PutObj1            : POP  EBX
19740    +=$8E8B  !=^PutObj2
19750    +=v*4    !=^PutObj4            : MOV ECX,[ESI+v*4]
19760    +=$88    !=^PutObj1
19770    +=$1904  !=^PutObj2            : MOV [ECX+EBX*4],AL
19780 ]
19790 :
19800 ^SetArray2
19810    I=I+1
19820    !=^Expression                  : index
19830    +=$53    !=^PutObj1            : PUSH EBX
19840    I=I+2                          : skip '}='
19850    !=^Expression
19860    !=^XchgAXBX
19870    +=$5B    !=^PutObj1            : POP  EBX
19880    +=$8E8B  !=^PutObj2
19890    +=v*4    !=^PutObj4            : MOV ECX,[ESI+v*4]
19900    +=$8966  !=^PutObj2
19910    +=$5904  !=^PutObj2            : MOV [ECX+EBX*4],AX
19920 ]
19930 :
19940 ^SetArray4
19950    I=I+1                          : skip [
19960    !=^Expression                  : index
19970    +=$53    !=^PutObj1            : PUSH EBX
19980    I=I+2                          : skip ']='
19990    !=^Expression
20000    !=^XchgAXBX
20010    +=$5B    !=^PutObj1            : POP  EBX
20020    +=$8E8B  !=^PutObj2
20030    +=v*4    !=^PutObj4            : MOV ECX,[ESI+v*4]
20040    +=$89    !=^PutObj1
20050    +=$9904  !=^PutObj2            : MOV [ECX+EBX*4],AX
20060 ]
20070 :
20080 :----------------------------------------------------------
20090 : For
20100 :----------------------------------------------------------
20110 ^ForCmd
20120    ;=D>1 "<for>"
20130    : T[U*3]:type, T[U*3+1]:var_addr, T[U*3+2]:jmp_addr
20140    I=I+1
20150    U=U+1
20160    T[U*3]=1                       : for
20170    T[U*3+1]=v                     : variable
20180    !=^Expression                  : 終了条件
20190    !=^PushBX                      : PUSH EBX
20200    T[U*3+2]=P+H['B']
20210 ]
20220 :
20230 :----------------------------------------------------------
20240 : Next
20250 :----------------------------------------------------------
20260 ^Next
20270    ;=D>1 "<next>"
20280    :I=I+1
20290    !=^Expression                  : 変数値更新
20300    !=^XchgAXBX
20310    +=$BB !=^PutObj1               : MOV EBX, variable
20320    +=Table[U*3+1] !=^PutObj4
20330    +=$8B   !=^PutObj1             : MOV ECX,[ESI+EBX*4]
20340    +=$9E0C !=^PutObj2
20350    +=$89   !=^PutObj1             : MOV [ESI+EBX*4],EAX
20360    +=$9E04 !=^PutObj2
20370    +=$5B   !=^PutObj1             : POP EBX
20380    +=$53   !=^PutObj1             : PUSH EBX
20390    +=$D939 !=^PutObj2             : CMP ECX,EBX
20400    +=$850F !=^PutObj2             : JNZ xxxxx
20410    +=T[U*3+2] !=^PutAddr          :
20420    +=$5B   !=^PutObj1             : POP EBX
20430    U=U-1
20440 ]
20450 :
20460 :----------------------------------------------------------
20470 : GOSUB
20480 :----------------------------------------------------------
20490 ^Com_GOSUB
20500    I=I+1                           : skip =
20510    ;=C(I)='^' +=$D3 !=^JumpOrCall #=^NextCom
20520    !=^GetNo n=r
20530    ;=Q>1   !=^SearchLine
20540    +=$E8   !=^PutObj1              : CALL r
20550    +=r     !=^PutAddr
20560  #=^NextCom
20570 :----------------------------------------------------------
20580 : GOTO
20590 :----------------------------------------------------------
20600 ^Com_GO
20610    I=I+1                           : skip =
20620    ;=C(I)='^' +=$E3 !=^JumpOrCall  #=^NextCom
20630    !=^GetNo n=r
20640    ;=n<0   #=^Com_Exit             : 終了
20650    ;=Q>1   !=^SearchLine
20660    +=$E9   !=^PutObj1              : JMP r
20670    +=r     !=^PutAddr
20680  #=^NextCom
20690 :
20700 ^JumpOrCall
20710    !=^Expression         : ラベル項はアドレスを返す
20720    +=$FF   !=^PutObj1              :
20730    !=^PutObj1                      : call/jmp [ebx]
20740  ]
20750 :
20760 :----------------------------------------------------------
20770 : 文字列出力
20780 :----------------------------------------------------------
20790 ^Com_String
20800    ;=D>1 "<String>"
20810    ;=C(I)='"' I=I+1 #=^NextCom
20820    !=^GetString
20830    +=5 !=^CallLib                  : OutAsciiZ
20840    I=I+1
20850   #=^NextCom
20860 :
20870 :----------------------------------------------------------
20880 : 文字列をコードに埋め込み、先頭アドレスをEAXに設定
20890 :----------------------------------------------------------
20900 ^GetString
20910    +qsj
20920    q=Obj+P+2 s=P+2
20930    +=$EB  !=^PutObj1               : JMP SHORT xxxx
20940    j=0;
20950    ;=C(I)='"' #=^gs
20960    @
20970      q(j)=C(I)
20980      I=I+1
20990      j=j+1
21000      ;=j>127 !=^Com_Error
21010    @=((C(I)='"')|(C(I)=0))
21020   ^gs
21030    q(j)=0
21040    +=j+1        !=^PutObj1         : jump here
21050    P=P+j+1
21060    +=$B8        !=^PutObj1         : MOV EAX,
21070    +=s+H['B']   !=^PutObj4         : 文字列先頭
21080    -jsq
21090 ]
21100 :
21110 :----------------------------------------------------------
21120 : 1文字表示
21130 :----------------------------------------------------------
21140 ^Com_OutChar
21150    ;=D>1 "<OutChar>"
21160    c=C(I)
21170    ;=c='=' I=I+1 #=^OutChar1
21180    ;=c='$' I=I+1 #=^OutChar2
21190    ;=c='#' I=I+1 #=^OutChar4
21200    ;=c='*' I=I+1 #=^OutString
21210    #=^Com_Error
21220 ^OutChar1
21230    !=^Expression
21240    !=^XchgAXBX
21250    +=7 !=^CallLib                 : OutChar
21260    #=^NextCom
21270 ^OutChar2
21280    I=I+1                          : skip =
21290    !=^Expression
21300    +=$F888  !=^PutObj2            : MOV AL,BH
21310    +=7 !=^CallLib                 : OutChar
21320    +=$d888  !=^PutObj2            : MOV AL,BL
21330    +=7 !=^CallLib                 : OutChar
21340    #=^NextCom
21350 ^OutChar4
21360    I=I+1                          : skip =
21370    !=^Expression
21380    !=^PushBX
21390    +=$c1    !=^PutObj1            : SHR EBX,16
21400    +=$10eb  !=^PutObj2
21410    +=$F888  !=^PutObj2            : MOV AL,BH
21420    +=7 !=^CallLib                 : OutChar
21430    +=$d888  !=^PutObj2            : MOV AL,BL
21440    +=7 !=^CallLib                 : OutChar
21450    !=^PopBX
21460    +=$F888  !=^PutObj2            : MOV AL,BH
21470    +=7 !=^CallLib                 : OutChar
21480    +=$d888  !=^PutObj2            : MOV AL,BL
21490    +=7 !=^CallLib                 : OutChar
21500    #=^NextCom
21510 :
21520 :----------------------------------------------------------
21530 : $*=
21540 :----------------------------------------------------------
21550 ^OutString
21560    I=I+1                          : skip *=
21570    ;=C(I)='"' #=^OutString2
21580    !=^Expression
21590    !=^XchgAXBX                    : EBX <--> EAX
21600    +=05     !=^CallLib            : call OutAsciiZ
21610  #=^NextCom
21620 :
21630 ^OutString2
21640    ;=C(I)='"' I=I+1 #=^NextCom    : empty string
21650    I=I+1                          : skip "
21660    !=^GetString                   : eax : string top address
21670    +=05     !=^CallLib            : call OutAsciiZ
21680   #=^NextCom
21690 :
21700 :----------------------------------------------------------
21710 : エラー
21720 :----------------------------------------------------------
21730 ^Com_Error
21740   / "Error (line:" ?=N[1] " at " ?=I ")" /
21750   ;=D>1 i=0 p=N+8 @  " " ?$=p(i) i=i+1 @=(p(i)=0) /
21760   i=0 p=N+8 @  $=p(i) i=i+1 @=(p(i)=0) /
21770   .=I-1 "^"
21780   !=^PrintLabel
21790   #=-1
21800 :----------------------------------------------------------
21810 : ファイル出力
21820 :----------------------------------------------------------
21830 ^Com_FileWrite
21840    ;=D>1 "<FileWrite>"
21850    ;=C(I)<>'*' #=^Com_FWrite2
21860    I=I+2                           : skip *=
21870    !=^Expression                   : ebx : &filename
21880    #=^Com_FWrite3
21890    :
21900 ^Com_FWrite2
21910    I=I+2                           : skip ="
21920    : 文字列をコードに埋め込み、先頭アドレスをEAXに設定
21930    !=^GetString
21940    !=^XchgAXBX                     : EBX <--> EAX
21950 ^Com_FWrite3
21960    +=$C931  !=^PutObj2             : XOR ECX,ECX
21970    +=$B1    !=^PutObj1             : MOV CL, '}'
21980    +='}'    !=^PutObj1
21990    +=$8B    !=^PutObj1             : MOV EAX,[ESI+ECX*4]
22000    +=$8E04  !=^PutObj2             :
22010    +=$B1    !=^PutObj1             : MOV CL, '{'
22020    +='{'    !=^PutObj1
22030    +=$8B    !=^PutObj1             : MOV ECX,[ESI+ECX*4]
22040    +=$8E0C  !=^PutObj2             : buffer
22050    +=$C829  !=^PutObj2             : SUB EAX,ECX
22060    : eax:size, ebx:filename, ecx:buffer
22070    +=46     !=^CallLib             : call FileWrite
22080    +=$C931  !=^PutObj2             : XOR ECX,ECX
22090    +=$B1    !=^PutObj1             : MOV CL, '|'
22100    +='|'    !=^PutObj1
22110    +=$89    !=^PutObj1             : MOV [ESI+ECX*4],EAX
22120    +=$8E04  !=^PutObj2
22130    #=^NextCom
22140 :
22150 :----------------------------------------------------------
22160 : ファイル入力
22170 :----------------------------------------------------------
22180 ^Com_FileRead
22190    ;=D>1 "<FileRead>"
22200    ;=C(I)<>'*' #=^Com_FRead2
22210    I=I+2                           : skip *=
22220    !=^Expression                   : ebx : &filename
22230    #=^Com_FRead3
22240 ^Com_FRead2
22250    I=I+2                           : skip ="
22260    : 文字列をコードに埋め込み、先頭アドレスをEAXに設定
22270    !=^GetString
22280    !=^XchgAXBX                     : EBX <--> EAX
22290 ^Com_FRead3
22300    +=$C931  !=^PutObj2             : XOR ECX,ECX
22310    +=$B1    !=^PutObj1             : MOV CL, '{'
22320    +='{'    !=^PutObj1
22330    +=$8B    !=^PutObj1             : MOV ECX,[ESI+ECX*4]
22340    +=$8E0C  !=^PutObj2             : buffer
22350    !=^PushBX
22360    +=47     !=^CallLib             : call FileSize
22370    !=^PopBX
22380    +=$C289  !=^PutObj2             : MOV EDX,EAX
22390    : ebx:filename, ecx:buffer, edx:size
22400    +=48     !=^CallLib             : call FileRead
22410    +=$C289  !=^PutObj2             : MOV EDX,EAX
22420    +=$C801  !=^PutObj2             : ADD EAX,ECX
22430    +=$C931  !=^PutObj2             : XOR ECX,ECX
22440    +=$B1    !=^PutObj1             : MOV CL, '}'
22450    +='}'    !=^PutObj1
22460    +=$89    !=^PutObj1             : MOV [ESI+ECX*4],EAX
22470    +=$8E04  !=^PutObj2             :
22480    +=$B1    !=^PutObj1             : MOV CL, ')'
22490    +=')'    !=^PutObj1
22500    +=$89    !=^PutObj1             : MOV [ESI+ECX*4],EDX
22510    +=$8E14  !=^PutObj2             :
22520    #=^NextCom
22530 :
22540 :----------------------------------------------------------
22550 : メモリの拡張
22560 :----------------------------------------------------------
22570 ^Com_BRK
22580    I=I+1
22590    !=^Expression
22600    +=$B8    !=^PutObj1            : MOV EAX, SYS_brk(45)
22610    +=45     !=^PutObj4
22620    +=$80CD  !=^PutObj2            : INT 0x80
22630    +=$DB31  !=^PutObj2            : XOR EBX,EBX
22640    +=$B3    !=^PutObj1            : MOV BL, '*'  RAM末設定
22650    +='*'    !=^PutObj1
22660    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], EAX
22670    +=$9E04  !=^PutObj2
22680   #=^NextCom
22690 :
22700 :----------------------------------------------------------
22710 : 変数をスタックへPUSH
22720 :----------------------------------------------------------
22730 ^Com_VarPush
22740    ;=C(I)='=' !=^PushExp #=^NextCom
22750    c=C(I)
22760    +=$C931  !=^PutObj2            : XOR ECX,ECX
22770    @
22780      +=$B1    !=^PutObj1          : MOV CL, VAR
22790      +c       !=^PutObj1
22800      +=$8B    !=^PutObj1          : MOV EAX, [ESI+ECX*4]
22810      +=$8E04  !=^PutObj2
22820      +=$0789  !=^PutObj2          : MOV [EDI],EAX
22830      +=$EF81  !=^PutObj2          : SUB EDI,4
22840      +=$04    !=^PutObj4
22850      I=I+1
22860      c=C(I)
22870    @=(((c<'A')|(c>'Z'))&((c<'a')|(c>'z')))
22880   #=^NextCom
22890 ^PushExp
22900    I=I+1
22910    !=^Expression
22920    +=$1F89 !=^PutObj2             : MOV [EDI],EBX
22930    +=$EF81 !=^PutObj2             : SUB EDI,4
22940    +=$04   !=^PutObj4
22950 ]
22960 :
22970 :----------------------------------------------------------
22980 : 外部コマンドの実行
22990 :----------------------------------------------------------
23000 ^Com_Exec
23010    ;=D>1 "<Exec>"
23020    ;=C(I)<>'*' #=^Com_Exec2
23030    I=I+2                           : skip *=
23040    !=^Expression
23050    !=^XchgAXBX                    : EBX <--> EAX
23060    : eax のアドレスからFileNameにコピー
23070    +=40 !=^CallLib                 : call GetString2
23080    : FileName に保存された外部プログラムを実行
23090    +=39 !=^CallLib                 : call ForkExec
23100    #=^NextCom
23110 :
23120 ^Com_Exec2
23130    I=I+2                           : skip ="
23140    : 文字列をコードに埋め込み、先頭アドレスをEAXに設定
23150    !=^GetString
23160    : eax のアドレスからFileNameにコピー
23170    +=40 !=^CallLib                 : call GetString2
23180    : FileName に保存された外部プログラムを実行
23190    +=39 !=^CallLib                 : call ForkExec
23200    #=^NextCom
23210 :
23220 :----------------------------------------------------------
23230 : 変数スタックから POP
23240 :----------------------------------------------------------
23250 ^Com_VarPop
23260    c=C(I)
23270    +=$C931  !=^PutObj2            : XOR ECX,ECX
23280    @
23290      +=$C781 !=^PutObj2           : ADD EDI,4
23300      +=04    !=^PutObj4
23310      +=$078B !=^PutObj2           : MOV EAX,[EDI]
23320      +=$B1   !=^PutObj1           : MOV CL, VAR
23330      +c      !=^PutObj1
23340      +=$89   !=^PutObj1           : MOV [ESI+ECX*4],EAX
23350      +=$8E04 !=^PutObj2
23360      I=I+1
23370      c=C(I)
23380    @=(((c<'A')|(c>'Z'))&((c<'a')|(c>'z')))
23390   #=^NextCom
23400 :----------------------------------------------------------
23410 : 空白出力
23420 :----------------------------------------------------------
23430 ^Com_Space
23440    ;=D>1 "<Space>"
23450    I=I+1
23460    !=^Expression
23470    +=$D989 !=^PutObj2              : MOV ECX, EBX
23480    +=$20B0 !=^PutObj2              : MOV AL, $20
23490    +=7 !=^CallLib                  : OutChar
23500    +=$F9E2 !=^PutObj2              : LOOP -7
23510   #=^NextCom
23520 :----------------------------------------------------------
23530 : 改行
23540 :----------------------------------------------------------
23550 ^Com_NewLine
23560    ;=D>1 "<NewLine>"
23570    +=9 !=^CallLib                 : NewLine
23580   #=^NextCom
23590 :----------------------------------------------------------
23600 : ラベル処理 ラベル:行番号テーブルの登録
23610 :   adr:int32 label:char[12]
23620 :----------------------------------------------------------
23630 ^Com_Label
23640    ;=D>1 "<Label>" /
23650    ;=Q>1 !=^LineEnd ]             : PASS1のみ
23660    L[K*4]=N[1]                    : 行番号
23670    p=L+(K*16+4)                   : ラベル登録
23680    i=I
23690    j=0
23700    @                              : ラベルを11文字登録
23710      c=C(i)
23720      p(0)=c                       : 1文字登録
23730      ;=j=11 p(0)=0                : 12文字目は0
23740      j=j+1
23750      p=p+1
23760      i=i+1
23770    @=((c=0)|(j=12))
23780    K=K+1 I=i-1
23790    ;=c<>0 !=^LineEnd
23800    #=^NextCom
23810 ^LineEnd
23820    @
23830      c=C(I)
23840      ;=c<>0 I=I+1
23850    @=(c=0)                        : 行末に設定
23860    ]
23870 :
23880 :----------------------------------------------------------
23890 : コメント
23900 :----------------------------------------------------------
23910 ^Com_Comment
23920   @ I=I+1 @=(C(I)=0)  c=0 I=I-1 : 行末に設定
23930   #=^NextCom
23940 :----------------------------------------------------------
23950 : IF
23960 :----------------------------------------------------------
23970 ^Com_IF
23980   ;=D>1 "<IF>"
23990   I=I+1
24000   !=^Expression
24010   n=N[1]+1
24020   ;=Q>1 !=^SearchLine
24030   +=$DB85 !=^PutObj2              : TEST EBX,EBX
24040   +=$840F !=^PutObj2              : JZ 次行先頭
24050   +=r     !=^PutAddr
24060   #=^NextCom
24070 :----------------------------------------------------------
24080 : 数値出力
24090 :----------------------------------------------------------
24100 ^Com_OutNum
24110    +n
24120    c=C(I)
24130    ;=c='=' n=18 #=^OutNum
24140    ;=c='?' I=I+1 n=15 #=^OutNum
24150    ;=c='#' I=I+1 n=14 #=^OutNum
24160    ;=c='$' I=I+1 n=13 #=^OutNum
24170    ;=c='*' I=I+1 n=17 #=^OutNum
24180    ;=c='(' I=I+1 n=21 #=^RightNum
24190    ;=c='[' I=I+1 n=19 #=^RightNum
24200    ;=c='{' I=I+1 n=12 #=^RightNum
24210    ;=c='!' I=I+1 n=11 #=^RightNum
24220    -n !=^Com_Error
24230 ^OutNum
24240    ;=D>1 "<OutNum>"
24250    I=I+1                          : skip =
24260    !=^Expression
24270    !=^XchgAXBX
24280    +n !=^CallLib                  : PrintLeft
24290    -n
24300    #=^NextCom
24310 ^RightNum
24320    ;=D>1 "<RightNum>"
24330    !=^Expression                  : 桁数 ebx
24340    +=$D989 !=^PutObj2             : MOV ECX,EBX
24350    I=I+2                          : skip x=
24360    +=$51   !=^PutObj1             : PUSH ECX
24370    !=^Expression                  : 数値 ebx
24380    +=$59   !=^PutObj1             : POP  ECX
24390    !=^XchgAXBX
24400    +n !=^CallLib                  : PrintLeft
24410    -n
24420    #=^NextCom
24430 :
24440 :----------------------------------------------------------
24450 : DO NEXT UNTIL
24460 :----------------------------------------------------------
24470 ^Com_DO
24480    c=C(I)
24490    ;=c<>'=' !=^DoCmd #=^NextCom
24500    I=I+1
24510    c=C(I)
24520    ;=c='(' !=^Until #=^NextCom
24530    ;=((c>='A')&(c<='Z'))|((c>='a')&(c<='z')) !=^Next
24540   #=^NextCom
24550 :----------------------------------------------------------
24560 : Do
24570 :----------------------------------------------------------
24580 ^DoCmd
24590    ;=D>1 "<do>"
24600    : T[U*3]:type, T[U*3+1]:var_addr, T[U*3+2]:jmp_addr
24610    U=U+1
24620    Table[U*3+2]=P+H['B']
24630    Table[U*3]=2          : 2 : do
24640 ]
24650 :----------------------------------------------------------
24660 : Until
24670 :----------------------------------------------------------
24680 ^Until
24690    ;=D>1 "<until>"
24700    I=I+1
24710    !=^Expression
24720    +=$DB85 !=^PutObj2             : TEST EBX,EBX
24730    +=$840F !=^PutObj2             : JZ 戻る
24740    +=Table[U*3+2] !=^PutAddr
24750    U=U-1
24760 ]
24770 :----------------------------------------------------------
24780 : 拡張コマンド
24790 :----------------------------------------------------------
24800 ^Com_Ext
24810   #=^NextCom
24820 :----------------------------------------------------------
24830 : リターン
24840 :----------------------------------------------------------
24850 ^Com_Return
24860    ;=D>1 "<ret>"
24870    +=$C3 !=^PutObj1               : RET
24880    #=^NextCom
24890 :----------------------------------------------------------
24900 : マイクロ秒スリープ
24910 :----------------------------------------------------------
24920 ^Com_USleep
24930    I=I+1
24940    !=^Expression
24950    !=^XchgAXBX
24960    +=38 !=^CallLib
24970   #=^NextCom
24980 :----------------------------------------------------------
24990 : 乱数シード設定
25000 :----------------------------------------------------------
25010 ^Com_RANDOM
25020    ;=D>1 "<rand>"
25030    I=I+1
25040    !=^Expression                  : 数値 ebx
25050    !=^XchgAXBX
25060    +=35 !=^CallLib                : sgenrand
25070   #=^NextCom
25080 :----------------------------------------------------------
25090 : ファイル先頭位置設定
25100 :----------------------------------------------------------
25110 ^Com_FileTop
25120    I=I+1                          : skip =
25130    !=^Expression
25140    +=$9E89 !=^PutObj2             : MOV [ESI+r*4],EBX
25150    +='{'*4   !=^PutObj4
25160   #=^NextCom
25170 :----------------------------------------------------------
25180 : ファイル終了位置設定
25190 :----------------------------------------------------------
25200 ^Com_FileEnd
25210    I=I+1                          : skip =
25220    !=^Expression
25230    +=$9E89 !=^PutObj2             : MOV [ESI+r*4],EBX
25240    +='}'*4   !=^PutObj4
25250   #=^NextCom
25260 :----------------------------------------------------------
25270 : プログラム終了
25280 :----------------------------------------------------------
25290 ^Com_Exit
25300   !=^ExitCode
25310   #=^NextCom
25320 :
25330 :----------------------------------------------------------
25340 : 組込みコマンド
25350 :----------------------------------------------------------
25360 ^Com_Function
25370    c=C(I)
25380    I=I+1
25390    ;=c='c' #=^Func_c
25400    ;=c='f' #=^Func_f
25410    ;=c='u' #=^Func_u
25420    ;=c='v' #=^Func_v
25430    ;=c='z' #=^Func_z
25440    #=^Com_Error
25450 ^Func_c
25460    ;=C(I)='a' !=^Func_ca #=^NextCom
25470    ;=C(I)='m' !=^Func_cm #=^NextCom
25480    #=^Com_Error
25490 ^Func_f
25500    ;=C(I)='b' !=^Func_fb #=^NextCom
25510    #=^Com_Error
25520 ^Func_u
25530    ;=C(I)='d' !=^Func_ud #=^NextCom
25540    #=^Com_Error
25550 ^Func_v
25560    ;=C(I)='e' !=^Func_ve #=^NextCom
25570    #=^Com_Error
25580 ^Func_z
25590    ;=C(I)='z' !=^Func_zz #=^NextCom
25600    #=^Com_Error
25610 :-----------------------------
25620 : cat
25630 ^Func_ca
25640    ;=D>1 "<cat>"
25650    !=^FuncBegin
25660    +=$1B8B  !=^PutObj2           : MOV EBX,[EBX]
25670    +=50     !=^CallLib           : call DispFile
25680 ]
25690 :
25700 :-----------------------------
25710 : chmod   (|cm="644 file")
25720 ^Func_cm
25730    ;=D>1 "<chmod>"
25740    !=^FuncBegin
25750    +=$038B  !=^PutObj2           : MOV EAX,[EBX] ; permission
25760    +=$8B    !=^PutObj1
25770    +=$045B  !=^PutObj2           : MOV EBX,[EBX+4] ; filename
25780    +=74     !=^CallLib           : call Oct2Bin
25790    +=$C189  !=^PutObj2           : MOV ECX,EAX
25800    +=$C031  !=^PutObj2           : XOR EAX,EAX
25810    +=$B0    !=^PutObj1
25820    +=15     !=^PutObj1           : MOV AL,SYS_chmod(15)
25830    +=$80CD  !=^PutObj2           : INT 0x80
25840    +=$C931  !=^PutObj2           : XOR ECX,ECX
25850    +=$B1    !=^PutObj1           : MOV CL,'|'
25860    +='|'    !=^PutObj1           :
25870    +=$89    !=^PutObj1           : MOV [ESI+ECX*4],EAX
25880    +=$8E04  !=^PutObj2
25890 ]
25900 :
25910 :-----------------------------
25920 : URL デコード
25930 ^Func_ud
25940    I=I+1
25950    +=$C931  !=^PutObj2           : XOR ECX,ECX
25960    +=$75B1  !=^PutObj2           : MOV CL,'u'
25970    +=$8B    !=^PutObj1
25980    +=$8E14  !=^PutObj2           : MOV EDX,[ESI+ECX*4]
25990    +=$028B  !=^PutObj2           : MOV EAX,[EDX]
26000    +=$8B    !=^PutObj1
26010    +=$045A  !=^PutObj2           : MOV EBX,[EDX+4]
26020    +=$8B    !=^PutObj1
26030    +=$084A  !=^PutObj2           : MOV ECX,[EDX+8]
26040    +=49     !=^CallLib           : call URL_Decode
26050    +=$89    !=^PutObj1
26060    +=$0C42  !=^PutObj2           : MOV [EDX+12],EAX
26070 ]
26080 :
26090 :-----------------------------
26100 : rvtlcのバージョン
26110 ^Func_ve
26120    +=$DB31  !=^PutObj2            : XOR EBX,EBX
26130    +=$B3    !=^PutObj1            : MOV BL, '%'
26140    +='%'    !=^PutObj1
26150    +=$B9    !=^PutObj1
26160    +=-30300 !=^PutObj4            : MOV ECX,-30300
26170    +=$89    !=^PutObj1            : MOV [ESI+EBX*4], ECX
26180    +=$9E0C  !=^PutObj2
26190 ]
26200 :
26210 :-----------------------------
26220 : システムコール呼び出し
26230 ^Func_zz
26240    I=I+1
26250    +=$57       !=^PutObj1         : PUSH EDI
26260    +=$56       !=^PutObj1         : PUSH ESI
26270    +=$F589     !=^PutObj2         : MOV EBP,ESI
26280    +=$C931     !=^PutObj2         : XOR ECX,ECX
26290    +=$61B1     !=^PutObj2         : MOV CL,0x61   'a'
26300    +=$448B     !=^PutObj2
26310    +=$008D     !=^PutObj2         : MOV EAX,[EBP+ECX*4]
26320    +=$41       !=^PutObj1         : INC ECX
26330    +=$5C8B     !=^PutObj2
26340    +=$008D     !=^PutObj2         : MOV EBX,[EBP+ECX*4]
26350    +=$41       !=^PutObj1         : INC ECX
26360    +=$41       !=^PutObj1         : INC ECX
26370    +=$548B     !=^PutObj2
26380    +=$008D     !=^PutObj2         : MOV EDX,[EBP+ECX*4]
26390    +=$41       !=^PutObj1         : INC ECX
26400    +=$7C8B     !=^PutObj2
26410    +=$008D     !=^PutObj2         : MOV EDI,[EBP+ECX*4]
26420    +=$41       !=^PutObj1         : INC ECX
26430    +=$748B     !=^PutObj2
26440    +=$008D     !=^PutObj2         : MOV ESI,[EBP+ECX*4]
26450    +=$80       !=^PutObj1
26460    +=$03E9     !=^PutObj2         : SUB CL,3
26470    +=$4C8B     !=^PutObj2
26480    +=$008D     !=^PutObj2         : MOV ECX,[EBP+ECX*4]
26490    +=$80CD     !=^PutObj2         : INT 0x80
26500    +=$5E       !=^PutObj1         : POP ESI
26510    +=$5F       !=^PutObj1         : POP EDI
26520    +=$C931     !=^PutObj2         : XOR ECX,ECX
26530    +=$B1       !=^PutObj1         : MOV CL,'|'
26540    +='|'       !=^PutObj1         :
26550    +=$89       !=^PutObj1         : MOV [ESI+ECX*4],EAX
26560    +=$8E04     !=^PutObj2
26570    :
26580 ]
26590 :----------------------------------------------------------
26600 : 組み込み関数汎用引数処理
26610 : ebx に引数ポインタ配列の先頭アドレスを返す
26620 : ex.[ebx]   第1引数へのポインタ
26630 :    [ebx+4] 第2引数へのポインタ
26640 :    [ebx+8] 第3引数へのポインタ など. 最終は null
26650 :----------------------------------------------------------
26660 ^FuncBegin
26670    I=I+1
26680    ;=C(I)<>'*' #=^FuncBegin2
26690 :-----------------------------
26700 : |xx*=e 系
26710 :-----------------------------
26720    ;=D>1 "<*=>"
26730    I=I+2
26740    !=^Expression
26750    !=^XchgAXBX                    : EBX <--> EAX
26760    : eax のアドレスの引数文字列をASCIIZへのポインタ配列に変換
26770    +=51 !=^CallLib                : call FGetArg
26780 ]
26790 :-----------------------------
26800 : |xx " " 系
26810 :-----------------------------
26820 ^FuncBegin2
26830    I=I+1                          : skip ' '
26840    ;=C(I)='"' I=I+1               : skip "
26850    !=^GetString                   : eax = string top address
26860    : eax のアドレスの引数文字列をASCIIZへのポインタ配列に変換
26870    +=51 !=^CallLib                : call FGetArg
26880 ]
26890 :
26900 :-----------------------------
26910 : |fb 系
26920 :-----------------------------
26930 ^Func_fb
26940    I=I+1
26950    ;=C(I)='o'      #=^Func_fbo    : fb open
26960    ;=C(I)='c'      #=^Func_fbc    : fb close
26970    ;=C(I)='d'      #=^Func_fbd    : fb dot
26980    ;=C(I)='f'      #=^Func_fbf    : fb fill
26990    ;=C(I)='l'      #=^Func_fbl    : fb line
27000    ;=C(I)='m'      #=^Func_fbm    : fb mem_copy
27010    ;=C(I)='p'      #=^Func_fbp    : fb put
27020    ;=C(I)='q'      #=^Func_fbq    : fb put with mask
27030    ;=C(I)='r'      #=^Func_fbr    : fb fill pattern
27040    ;=C(I)='s'      #=^Func_fbs    : fb set_screen
27050    ;=C(I)='t'      #=^Func_fbt    : fb put2
27060    #=^Com_Error
27070 :
27080 ^Func_fbo
27090    +=73       !=^CallLib         : call OpenFB
27100    +=$C931    !=^PutObj2         : XOR ECX,ECX
27110    +=$66B1    !=^PutObj2         : MOV CL,'f'
27120    +=$89      !=^PutObj1         : MOV [ESI+ECX*4],EAX
27130    +=$8E04    !=^PutObj2
27140    +=$67B1    !=^PutObj2         : MOV CL,'g'
27150    +=$89      !=^PutObj1         : MOV [ESI+ECX*4],EBX
27160    +=$8E1C    !=^PutObj2
27170 ]
27180 :
27190 ^Func_fbc
27200    : 保存済みの設定を復帰
27210    +=63       !=^CallLib          : call    fb_restore_sc
27220    +=59       !=^CallLib          : call    fb_unmap_screen
27230    +=53       !=^CallLib          : call    fbdev_close
27240 ]
27250 :
27260 ^Func_fbd
27270    +=$C931    !=^PutObj2          : xor ecx,ecx
27280    +=$B1      !=^PutObj1
27290    +='d'      !=^PutObj1          : mov cl,'d'
27300    +=$8B      !=^PutObj1
27310    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27320    +=66       !=^CallLib          : Dot
27330 ]
27340 :
27350 ^Func_fbf
27360    +=$C931    !=^PutObj2          : xor ecx,ecx
27370    +=$B1      !=^PutObj1
27380    +='m'      !=^PutObj1          : mov cl,'m'
27390    +=$8B      !=^PutObj1
27400    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27410    +=71       !=^CallLib          : FrameBufferFill
27420 ]
27430 :
27440 ^Func_fbl
27450    +=$C931    !=^PutObj2          : xor ecx,ecx
27460    +=$B1      !=^PutObj1
27470    +='l'      !=^PutObj1          : mov cl,'l'
27480    +=$8B      !=^PutObj1
27490    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27500    +=65       !=^CallLib          : LineDraw
27510 ]
27520 :
27530 ^Func_fbm
27540    +=$C931    !=^PutObj2          : xor ecx,ecx
27550    +=$B1      !=^PutObj1
27560    +='c'      !=^PutObj1          : mov cl,'c'
27570    +=$8B      !=^PutObj1
27580    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27590    +=72       !=^CallLib          : MemCopy
27600 ]
27610 :
27620 ^Func_fbp
27630    +=$C931    !=^PutObj2          : xor ecx,ecx
27640    +=$B1      !=^PutObj1
27650    +='p'      !=^PutObj1          : mov cl,'p'
27660    +=$8B      !=^PutObj1
27670    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27680    +=67       !=^CallLib          : PatternTransfer
27690 ]
27700 :
27710 ^Func_fbq
27720    +=$C931    !=^PutObj2          : xor ecx,ecx
27730    +=$B1      !=^PutObj1
27740    +='q'      !=^PutObj1          : mov cl,'q'
27750    +=$8B      !=^PutObj1
27760    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27770    +=69       !=^CallLib          : MPatternTransfer
27780 ]
27790 :
27800 ^Func_fbr
27810    +=$C931    !=^PutObj2          : xor ecx,ecx
27820    +=$B1      !=^PutObj1
27830    +='r'      !=^PutObj1          : mov cl,'r'
27840    +=$8B      !=^PutObj1
27850    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27860    +=70       !=^CallLib          : PatternFill
27870 ]
27880 :
27890 ^Func_fbs
27900    +=56       !=^CallLib          : fb_set_screen
27910 ]
27920 :
27930 ^Func_fbt
27940    +=$C931    !=^PutObj2          : xor ecx,ecx
27950    +=$B1      !=^PutObj1
27960    +='t'      !=^PutObj1          : mov cl,'t'
27970    +=$8B      !=^PutObj1
27980    +=$8E2C    !=^PutObj2          : mov ebp,[esi+ecx*4]
27990    +=68       !=^CallLib          : PatternTransfer2
28000 ]
28010 :
28020 :----------------------------------------------------------
28030 : ラベルテーブルの検索
28040 :   r:行番号
28050 :----------------------------------------------------------
28060 ^SearchLabel
28070    +kifjp
28080    k=0 r=-1
28090    @
28100      p=L+(k*16+4)                 : ラベル文字列先頭
28110      i=0 j=I f=0
28120      @
28130        ;=(C(j)<>p(i))&(p(i)<>0) f=1 : 一致しない
28140        j=j+1
28150        i=i+1
28160      @=((f=1)|(p(i)=0))
28170      ;=(f=0)&(i<11)&((C(j)<>' ')&(C(j)<>0)) f=1
28180      ;=(f=0)&(p(i)=0) r=L[k*4]    : 行番号
28190      ;=(D>2)&(r>0) $*=p /
28200      k=k+1
28210    @=((k>=K)|(r>0))
28220    I=j
28230    ;=(C(I)<>' ')&(C(I)<>0) @ I=I+1 @=((C(I)=' ')|(C(I)=0))
28240    -pjfik
28250 ]
28260 :
28270 :----------------------------------------------------------
28280 : ラベルテーブルの表示
28290 :----------------------------------------------------------
28300 ^PrintLabel
28310    / ;=K=0 ]
28320    k=0,K-1
28330      "  "
28340      ?(8)=L[k*4] " : "              : コードアドレス
28350      p=L+(k*16+4)                 : ラベル文字列先頭
28360      $*=p /
28370    @=k+1
28380 ]
28390 :
28400 :----------------------------------------------------------
28410 : 行番号テーブルの検索
28420 :   in  n:検索行番号
28430 :   out r:addr
28440 :----------------------------------------------------------
28450 ^SearchLine
28460    +wf
28470    w=0 f=0
28480    @
28490      ;=V[w*2]>=n r=V[w*2+1] f=1   : コードアドレス
28500      w=w+1
28510    @=((w>=W)|(f=1))
28520   -fw
28530 ]
28540 :
28550 :----------------------------------------------------------
28560 : 行番号テーブルの表示
28570 :----------------------------------------------------------
28580 ^PrintLine
28590    /
28600    w=0,W-1
28610      ?(8)=V[w*2] " : "            : 行番号
28620      ??=V[w*2+1] /                : コードアドレス
28630    @=w+1
28640 ]
28650 :
28660 :-------------------------------------------------
28670 : .data
28680 :-------------------------------------------------
28690 ^DataSection
28700    :P=(P+$FF)/$100*$100
28710    H['M']=P
28720    :@
28730    :  Obj(P)=0    : initialize
28740    :  P=P+1
28750    :@=(P=(H['M']+H['L']))
28760    H['Q']=P
28770 ]
28780 :
28790 :-------------------------------------------------
28800 : セクション文字列テーブルの設定
28810 :-------------------------------------------------
28820 ^SectionStr
28830    +q
28840    H['S']=P
28850    q=Obj+P
28860    q(0)=0 q=q+1
28870    H['T']=q-Obj-P
28880    q*=".text" q=q+%+1
28890    H['D']=q-Obj-P
28900    q*=".data" q=q+%+1
28910    H['E']=q-Obj-P
28920    q*=".bss" q=q+%+1
28930    H['H']=q-Obj-P
28940    q*=".shstrtab" q=q+%+1
28950    P=q-Obj
28960    H['Y']=P-H['S']      :
28970    ;=D>2 / $*=Obj+H['S']+H['T'] /
28980    ;=D>2 $*=Obj+H['S']+H['D'] /
28990    ;=D>2 $*=Obj+H['S']+H['E'] /
29000    ;=D>2 $*=Obj+H['S']+H['H'] /
29010    -q
29020  ]
29030 :
29040 :-------------------------------------------------
29050 : セクションテーブルの設定
29060 :-------------------------------------------------
29070 ^SectionHeader
29080    Obj[08]=P         :   e_shoff
29090    Obj{23}=40        :   e_shentsize
29100    Obj{24}=5         :   e_shnum
29110    : NULL
29120    E=Obj+P
29130    E[0]=0            : sh_name
29140    E[1]=0            : sh_type
29150    E[2]=0            : sh_flags
29160    E[3]=0            : sh_addr
29170    E[4]=0            : sh_offset
29180    E[5]=0            : sh_size
29190    E[6]=0            : sh_link
29200    E[7]=0            : sh_info
29210    E[8]=0            : sh_addralign
29220    E[9]=0            : sh_entsize
29230    P=P+40
29240    : .text
29250    E=Obj+P
29260    E[0]=H['T']       : sh_name
29270    E[1]=1            : sh_type  SHT_PROGBITS<1>
29280    E[2]=6            : sh_flags SHF_ALLOC<2> | SHF_EXECINSTR<4>
29290    E[3]=H['A']       : sh_addr
29300    E[4]=H['P']       : sh_offset
29310    E[5]=H['Z']       : sh_size
29320    E[6]=0            : sh_link
29330    E[7]=0            : sh_info
29340    E[8]=0            : sh_addralign
29350    E[9]=0            : sh_entsize
29360    P=P+40
29370    : .data
29380    E=Obj+P
29390    E[0]=H['D']       : sh_name
29400    E[1]=1            : sh_type  SHT_PROGBITS<1>
29410    E[2]=3            : sh_flags SHF_ALLOC<2> |  SHF_WRITE<1>
29420    E[3]=H['K']       : sh_addr     $080A0000
29430    E[4]=H['M']       : sh_offset
29440    E[5]=H['L']       : sh_size     0
29450    E[6]=0            : sh_link
29460    E[7]=0            : sh_info
29470    E[8]=$1000        : sh_addralign
29480    E[9]=0            : sh_entsize
29490    P=P+40
29500    : .bss
29510    E=Obj+P
29520    E[0]=H['E']       : sh_name
29530    E[1]=8            : sh_type  SHT_NOBITS<8>
29540    E[2]=3            : sh_flags SHF_ALLOC<2> | SHF_WRITE<1>
29550    E[3]=H['K']+H['L']  : sh_addr   $080A0000
29560    E[4]=H['M']+H['L']  : sh_offset
29570    E[5]=H['U']+H['R']  : sh_size   $4000+$40000   ****
29580    E[6]=0            : sh_link
29590    E[7]=0            : sh_info
29600    E[8]=$1000        : sh_addralign
29610    E[9]=0            : sh_entsize
29620    P=P+40
29630    : .shstrtab
29640    E=Obj+P
29650    E[0]=H['H']       : sh_name
29660    E[1]=3            : sh_type  SHT_STRTAB<3>
29670    E[2]=0            : sh_flags
29680    E[3]=0            : sh_addr
29690    E[4]=H['S']       : sh_offset
29700    E[5]=H['Y']       : sh_size
29710    E[6]=0            : sh_link
29720    E[7]=0            : sh_info
29730    E[8]=16           : sh_addralign
29740    E[9]=0            : sh_entsize
29750    P=P+40
29760 ]
29770 :
29780 :-------------------------------------------------
29790 : Setup ELF Header and Runtime Library
29800 :-------------------------------------------------
29810 ^SetUpLib
29820    : Elf32_Header
29830    Obj[00]=$464c457f
29840    Obj[01]=$00010101
29850    Obj[02]=0
29860    Obj[03]=0
29870    Obj{08}=2             :   e_type    ET_EXEC<2>
29880    Obj{09}=3             :   e_machine EM_386<3>
29890    Obj[05]=1             :   e_version EV_CURRENT<1>
29900    Obj[06]=H['A']        :   e_entry
29910    Obj[07]=13*4          :   e_phoff
29920    Obj[08]=0             :   e_shoff
29930    Obj[09]=0             :   e_flags
29940    Obj{20}=52            :   e_ehsize
29950    Obj{21}=32            :   e_phentsize
29960    Obj{22}=2             :   e_phnum
29970    Obj{23}=0             :   e_shentsize
29980    Obj{24}=0             :   e_shnum
29990    Obj{25}=4             :   e_shstrndx
30000    : Elf32_ProgramHeader .text
30010    Obj[13]=1             :   p_type    PT_LOAD<1>
30020    Obj[14]=0             :   p_offset
30030    Obj[15]=H['B']        :   p_vaddr
30040    Obj[16]=H['B']        :   p_paddr
30050    Obj[17]=100           :   p_filesz
30060    Obj[18]=100           :   p_memsz
30070    Obj[19]=5             :   p_flags   PF_X<1> + PF_R<4>
30080    Obj[20]=$100          :   p_align
30090    :  Elf32_ProgramHeader .data .bss
30100    Obj[21]=1             :   p_type    PT_LOAD<1>
30110    Obj[22]=0             :   p_offset
30120    Obj[23]=H['K']        :   p_vaddr
30130    Obj[24]=H['K']        :   p_paddr
30140    Obj[25]=$100          :   p_filesz
30150    Obj[26]=H['L']+H['U']+H['R'] :   p_memsz
30160    Obj[27]=6             :   p_flags   PF_W<2> + PF_R<4>
30170    Obj[28]=$100          :   p_align
30180    : _start jump main
30190    Obj[029]=$90909090
30200    Obj[030]=$90909090
30210    Obj[031]=$90909090
30220    Obj[032]=$0013EFE9    : ここ以降はrt.binに上書きされる
30230    Obj[033]=$90909000
30240    : ?=F[034] /          : ライブラリサイズ(word)
30250    : Jump Table         lib#
30260    : Library
30270    i=32
30280    @
30290      Obj[i]=F[i]
30300      i=i+1
30310    @=(i>=F[34])
30320    :
30330    P=F[34]*4
30340 ]
30350 :
30360 :
30370 :----------------------------------
30380 : 時間計測開始
30390 :----------------------------------
30400 ^TimerStart
30410     H['I']=_  H['J']=%
30420 ]
30430 :
30440 :----------------------------------
30450 : 時間計測終了、経過時間表示
30460 :----------------------------------
30470 ^TimerStop
30480     t=H['I'] u=H['J'] x=_ y=%
30490     d=x-t f=y-u
30500     ;=(f<0) d=d-1 f=f+1000000
30510     "  time:" ?=d "." ?[6]=f "sec" /
30520 ]
30530 :
30540 :-------------------------------------------------
30550 : ソース読み込み
30560 :-------------------------------------------------
30570 ^InitSource
30580 :  z=&
30590   Y=z       z=z+(512*1024)      : ソース保存領域
30600   H['G']=z  z=z+16              : work
30610   !=^LoadSource
30620   !=^MkFileName
30630 :  !=^ListSource
30640   M=Y                           :
30650 ]
30660 :
30670 :-------------------------------------------------
30680 : 出力ファイル名をXに設定
30690 :-------------------------------------------------
30700 ^MkFileName
30710    +bzinf
30720    b=z z=z+256
30730    [=0 b*=\0
30740    n=%
30750    i=n
30760    @
30770      i=i-1
30780    @=((b(i)='.')|(i=0))
30790    ;=i=0 f=b+n f*=".elf" X*=b ]
30800    f=b+i f*=".elf" X*=b
30810    -fnizb
30820 ]
30830 :
30840 :-------------------------------------------------
30850 : ソースファイルを読み込み
30860 :-------------------------------------------------
30870 ^LoadSource
30880    +ynml
30890    !=^SourceOpen         : ソースファイルをオープン
30900    y=Y
30910    l=0
30920    @
30930      : 1行読み込み
30940      !=^SourceRead
30950      ;=c=' ' !=^SkipSpace
30960      ;=(c<'0')|(c>'9') !=^SkipLine #=^ls0
30970      !=^GetLineNo        : 行番号
30980      y[1]=n
30990      m=8
31000      @
31010        y(m)=c            : ソースをLFまで保存
31020        m=m+1
31030        !=^SourceRead
31040        ;=c=$0D !=^SourceRead
31050      @=((c=$0A)|(c=0))
31060      y(m)=0 m=m+1
31070      m=(m+3)/4*4         : 4でアライン
31080      y[0]=m              : 次行までのオフセットを設定
31090      y=y+m
31100      l=l+1
31110     ^ls0
31120    @=(c=0)
31130    y[0]=-1
31140    !=^SourceClose        : ソースファイルをクローズ
31150    / "read " ?=l " lines" /
31160    -lmny
31170 ]
31180 :
31190 :-------------------------------------------------
31200 : 1行読み飛ばし
31210 ^SkipLine
31220    @
31230      !=^SourceRead
31240    @=((c=$0A)|(c=0))
31250 ]
31260 :
31270 :-------------------------------------------------
31280 : ソース表示
31290 :-------------------------------------------------
31300 ^ListSource
31310    y=Y
31320    n=0
31330    @
31340      ?(6)=y[1]
31350      $*=y+8 /
31360      y=y+y[0]
31370    @=(y[0]=-1)
31380 ]
31390 :
31400 :-------------------------------------------------
31410 : 空白除去
31420 :-------------------------------------------------
31430 ^SkipSpace
31440     @
31450       !=^SourceRead
31460       ;=(c>='0')&(c<='9') n=n*10+(c-'0')
31470     @=((c<>' '))
31480 ]
31490 :
31500 :-------------------------------------------------
31510 : 行番号取得 cに1文字目
31520 :-------------------------------------------------
31530 ^GetLineNo
31540     n=c-'0'
31550     @
31560       !=^SourceRead
31570       ;=(c>='0')&(c<='9') n=n*10+(c-'0')
31580     @=((c<'0')|(c>'9'))
31590 ]
31600 :
31610 :-------------------------------------------------
31620 : ソースファイルをオープン
31630 :-------------------------------------------------
31640 ^SourceOpen
31650    +r
31660    b=\0
31670    !=^fropen
31680    H['F']=r
31690    -r
31700 ]
31710 :
31720 :-------------------------------------------------
31730 : ソースファイルをクローズ
31740 :-------------------------------------------------
31750 ^SourceClose
31760    b=H['F']
31770    !=^fclose
31780 ]
31790 :
31800 :-------------------------------------------------
31810 : ソースから1文字読み込み
31820 :-------------------------------------------------
31830 ^SourceRead
31840   a=0               : read
31850   b=H['F']          : fd
31860   c=H['G']          : buffer
31870   d=1               : size
31880   |zz
31890   c=c(0)
31900   ;=(|<=0) c=0
31910 ]
31920 :
31930 :-------------------------------------------------
31940 : ファイルをオープン
31950 : enter   b : 第１引数 filename
31960 : return  r : fd, if error then eax will be negative.
31970 :-------------------------------------------------
31980 ^fropen
31990    c=0              : 第２引数 flag=O_RDONLY
32000    #=^fopen
32010 ^fwopen
32020    c=577            : O_CREAT|O_WRONLY|O_TRUNC
32030 ^fopen
32040    a=2              : システムコール番号 SYS_open
32050    d=420            : 第３引数 mode=0644
32060    |zz
32070    r=|
32080 ]
32090 :-------------------------------------------------
32100 : ファイルをクローズ
32110 : enter   b : 第１引数 ファイルディスクリプタ
32120 :-------------------------------------------------
32130 ^fclose
32140    a=3              : システムコール番号 SYS_close
32150    |zz
32160    r=|
32170 ]
32180 :
32190 :-------------------------------------------------
32200 : コンパイル済みの場合メモリ中のランタイムライブラリ
32210 : をコピー
32220 :-------------------------------------------------
32230 ^GetLib
32240    +im
32250    [=0
32260    m=H['A']         : e_entry = $08048080
32270    "Get library " ?=m[2]*4 "bytes from compiler." /
32280    i=0,m[2]-1
32290      F[32+i]=m[i]
32300    @=i+1
32310    [=1
32320    -mi
32330 ]
32340 :
