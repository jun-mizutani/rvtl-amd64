
1000 :-------------------------------------------------
1010 : DNS Client  2010/06/26
1020 :
1030 : rvtl dns_XX.vtl - 8.8.8.8 www.example.com
1040 :-------------------------------------------------
1050 :
1060 z=&
1070 CacheSize=128*1024
1080 s=z z=z+16        : ip
1090 d=z d=z+16        : dns ip
1100 u=z z=z+256       : URL or PATH
1110 h=z z=z+256       : host
1120 q=z z=z+512       : dns buffer
1130 B=z z=z+512       : DNS Response buffer
1140 b=z z=z+CacheSize
1150 W=z z=z+512       : NAME
1160 [=0
1170 :
1180 d*=\0             : DNS IP address
1190 "DNS:" $*=d /
1200 ;=%=0 !=^Usage / #=-1
1210 h*=\1             : domain
1220 $*=h /
1230 ;=%=0 !=^Usage / #=-1
1240 [=1
1250 :------------------------------
1260 R=`&$FFFF
1270 !=^AdrByName
1280 ;=r<>0 !=^CheckDnsRes
1290 #=-1
1300 :
1310 :-------------------------------------------------
1320 : print usage
1330 :-------------------------------------------------
1340 ^Usage
1350   "usage   : ./dns.elf DNS_ADDRESS HOST" /
1360   "example : ./dns.elf 127.0.0.1 www.mztn.org" /
1370 ]
1380 :
1390 :-------------------------------------------------
1400 : make DNS query packet
1410 :  enter  h : hostname
1420 :         R : identification
1430 :         q : buffer
1440 :  return q[] : DNS query packet
1450 :         r : # of bytes
1460 :-------------------------------------------------
1470 ^DNS_query
1480   +pgijk
1490   r=R !=^ConvEndian2 q{0}=r     : ID
1500   q{1}=$0001 : query=0,Opcode=0 (network order)
1510   q{2}=$0100 : 1 question (network order)
1520   q{3}=$0000
1530   q{4}=$0000
1540   q{5}=$0000
1550   : h     [myhost.example.com]
1560   : q{6}- [6myhost7example3com0]
1570   p=q+(2*6)
1580   i=0
1590   j=0
1600   h*=h
1610   g=%
1620   i=0
1630   @
1640     ;=(h(i)<>'.')&(h(i)<>0) #=^DQ01
1650     ;=i=0 #=^DQ01
1660     p(0)=j    : pascal string
1670     p=p+1
1680     k=0
1690     @
1700       p(0)=h(i-j+k)
1710       p=p+1
1720       k=k+1
1730     @=(k>=j)
1740     j=0
1750     i=i+1
1760   ^DQ01
1770     j=j+1
1780     i=i+1
1790   @=(i>=(g+1))
1800   p(0)=0
1810   p=p+1
1820   :
1830   p{0}=$0100  : Type(network order)
1840   p=p+2
1850   p{0}=$0100  : Class(network order)
1860   r=p+2-q
1870   -kjigp
1880 ]
1890 :
1900 :-------------------------------------------------
1910 : Request DNS
1920 : enter   d : dns ip string
1930 :         h : hostname string
1940 :         R : ID
1950 : return  r : if 0, recieve error
1960 :-------------------------------------------------
1970 ^AdrByName
1980   +szcput
1990   s=z z=z+16
2000   c=z z=z+48
2010   !=^SocketUDP
2020   ;=r<0 "Socket Error! " ?=r / #=-1
2030   f=r
2040   !=^DNS_query
2050   t=q
2060   u=r
2070   p=53
2080   !=^SendToBuf
2090   ;=r<0 "SendTo Error! " ?=r / #=-1
2100   "SendTo " ?=r "bytes" /
2110   :---- response ----
2120   u=512
2130   !=^ReadWait5s
2140   ;=r=0 / "No response in 5sec." / #=^ABNexit
2150   !=^RecvFromBuf
2160   ;=r<0 "RecvFrom Error! " ?=r / #=-1
2170   "recieve " ?=r " bytes" /
2180   :---- data dump ----
2190   :+ij
2200   :i=0,r-1
2210   :  "<" ?[2]=i ">" ?$=q(i) " "
2220   :  "["
2230   :  j='.'
2240   :  ;=(q(i)>=$20)&(q(i)<$80) j=q(i)
2250   :  $=j "] "
2260   :  ;=(i-(i/8*8))=7 /
2270   :@=i+1
2280   :-ji
2290 ^ABNexit
2300   -tupczs
2310 ]
2320 :
2330 :-------------------------------------------------
2340 : Check DNS response
2350 : enter   q : buffer
2360 :         n : response size
2370 :         R : ID
2380 : return  r : ip address
2390 :-------------------------------------------------
2400 ^CheckDnsRes
2410   r=q{0} !=^ConvEndian2 S=r : ID
2420   ;=S<>R  "ID [" ??=S ":" ??=R "] doesnot match." /
2430   / "ID      : " ?#=S /
2440   ?!8!=q(2) " " ?!8!=q(3) /
2450   r=q{2} !=^ConvEndian2 A=r : QDCount
2460   "QDCount : " ?=A /
2470   r=q{3} !=^ConvEndian2 B=r : ANCount
2480   "ANCount : " ?=B /
2490   r=q{4} !=^ConvEndian2 U=r : NSCount
2500   "NSCount : " ?=U /
2510   r=q{5} !=^ConvEndian2 D=r : ARCount
2520   "ARCount : " ?=D /
2530   p=q+12
2540   ;=A=0 #=^ANCount
2550   / "Question"
2560   / "  offset  : " ?=p-q /
2570   "  NAME    : "
2580   !=^CheckName
2590   r=p{0} !=^ConvEndian2 T=r : TYPE
2600   "  TYPE    : " ?=T /
2610   r=p{1} !=^ConvEndian2 C=r : CLASS
2620   "  CLASS   : " ?=C /
2630   p=p+4
2640 ^ANCount
2650   E=B+U+D
2660   ;=E=0 ]
2670   I=0,E-1
2680     ;=(I=0)&(B>0)    / "Answer"
2690     ;=(I=B)&(U>0)    / "Name Server"
2700     ;=(I=(B+U))&(D>0)  / "Additional"
2710     / "  offset  : " ?=p-q /
2720     "  NAME    : "
2730     !=^CheckName
2740     r=p{0} !=^ConvEndian2 T=r : TYPE
2750     "  TYPE    : " ?=T /
2760     r=p{1} !=^ConvEndian2 C=r : CLASS
2770     "  CLASS   : " ?=C /
2780     r=p[2] !=^ConvEndian4 L=r : TTL
2790     "  TTL     : " ?=L /
2800     r=p{4} !=^ConvEndian2 N=r : RDLENGTH
2810     "  RDLENGTH: " ?=N /
2820     p=p+10
2830     !=^CheckRData
2840   @=I+1
2850 ]
2860 :
2870 :-------------------------------------------------
2880 : Check Name
2890 : enter   q : buffer
2900 :         p : top of Name
2910 :         n : response size
2920 :         R : ID
2930 : return  r : ip address
2940 :-------------------------------------------------
2950 ^CheckName
2960   ;=p(0)=0 p=p+1 "(none)" / ]
2970   +s
2980   s=W
2990   e=0
3000   @
3010     !=^NameField
3020   @=(e=1)
3030   -s
3040 ]
3050 :
3060 :-------------------------------------------------
3070 : Name
3080 :-------------------------------------------------
3090 ^NameField
3100   ;=e=1 ]
3110   ;=(p(0)&$C0)<>0 !=^MesgDecomp ]
3120   @
3130     !=^PStringCopy
3140     p=p+r
3150     s=s+r
3160     ;=p(0)<>0 s(0)='.' $='.' s=s+1
3170   @=((p(0)=0)|((p(0)&$C0)<>0))
3180   ;=p(0)=0 p=p+1 e=1 /
3190 ]
3200 :
3210 :-------------------------------------------------
3220 : Message Decompression
3230 :-------------------------------------------------
3240 ^MesgDecomp
3250   +p
3260   o=(p(0)*256+p(1))&$3FFF : calc offset
3270   p=q+o
3280   @
3290     !=^NameField
3300   @=(e=1)
3310   -p
3320   p=p+2
3330 ]
3340 :
3350 :-------------------------------------------------
3360 : Pascal String Copy to buffer
3370 : enter   s : buffer to copy string
3380 :         x : pointer to next char
3390 :-------------------------------------------------
3400 ^PStringCopy
3410   +ni
3420   n=p(0)
3430   i=1,n
3440     s(i)=p(i) $=p(i)
3450   @=i+1
3460   s(n+1)=0
3470   r=n+1
3480   -in
3490 ]
3500 :
3510 :-------------------------------------------------
3520 : Check RData
3530 : enter   q : buffer
3540 :         p : top of RData
3550 :         n : RData length
3560 : return  r :
3570 :-------------------------------------------------
3580 ^CheckRData
3590   "  RDATA   : "
3600   ;=T=1 ?=p(0) "." ?=p(1) "." ?=p(2) "." ?=p(3) /
3610   ;=T=2 !=^CheckName ]
3620   p=p+N
3630 ]
3640 :
3650 

10000 :=================================================
10010 : rvtl (x86_64) library for network  2015/08/30
10020 :
10030 :=================================================
10040 : z=&
10050 
10060 :-------------------------------------------------
10070 : enter   a : syscall#
10080 : return  r : fd, negative(error)
10090 :-------------------------------------------------
10100 ^SocketCall
10110   +bcdefg
10120   b=c;0]
10130   d=c;2]
10140   e=c;3]
10150   f=c;4]
10160   g=c;5]
10170   c=c;1]
10180   |zz
10190   r=|
10200   -gfedcb
10210 ]
10220 :
10230 :-------------------------------------------------
10240 :sys_socket
10250 : enter   c:引数配列名を代入
10260 :         c;0]=familyb
10270 :         c;1]=type
10280 :         c;2]=protocol
10290 : return  r : fd, negative(error)
10300 :-------------------------------------------------
10310 ^Socket
10320   +a
10330   a=41
10340   !=^SocketCall
10350   -a
10360 ]
10370 :
10380 :-------------------------------------------------
10390 :sys_bind
10400 : enter   c:引数配列名を代入
10410 :         c;0]=fd, c;1]=(sockaddr *)umyaddr,
10420 :         c;2]=addrlen
10430 : return  r
10440 :-------------------------------------------------
10450 ^Bind
10460   +a
10470   a=49
10480   !=^SocketCall
10490   -a
10500 ]
10510 :
10520 :-------------------------------------------------
10530 :sys_connect
10540 : enter   c:引数配列名を代入
10550 :         c;0]=fd, c;1]=sockaddr *uservaddr,
10560 :         c;2]=addrlen
10570 : return  r
10580 :-------------------------------------------------
10590 ^Connect
10600   +a
10610   a=42
10620   !=^SocketCall
10630   -a
10640 ]
10650 :
10660 :-------------------------------------------------
10670 :sys_listen
10680 : enter   c:引数配列名を代入
10690 :         c;0]=fd, c;1]=backlog
10700 : return  r
10710 :-------------------------------------------------
10720 ^Listen
10730   +a
10740   a=50
10750   !=^SocketCall
10760   -a
10770 ]
10780 :
10790 :-------------------------------------------------
10800 :sys_accept
10810 : enter   c:引数配列名を代入
10820 :         c;0]=fd, c;1]=sockaddr *upeer_sockaddr,
10830 :         c;2]=*upeer_addrlen
10840 : return  r
10850 :-------------------------------------------------
10860 ^Accept
10870   +a
10880   a=43
10890   !=^SocketCall
10900   -a
10910 ]
10920 :
10930 :-------------------------------------------------
10940 :sys_getsockname
10950 : enter   c:引数配列名を代入
10960 :         c;0]=fd, c;1]=sockaddr *usockaddr,
10970 :         c;2]=*usockaddr_len
10980 : return  r
10990 :-------------------------------------------------
11000 ^GetSockName
11010   +a
11020   a=51
11030   !=^SocketCall
11040   -a
11050 ]
11060 :
11070 :-------------------------------------------------
11080 :sys_getpeername
11090 : enter   c:引数配列名を代入
11100 :         c;0]=fd, c;1]=sockaddr *usockaddr,
11110 :         c;2]=*usockaddr_len
11120 : return  r
11130 :-------------------------------------------------
11140 ^GetPeerName
11150   +a
11160   a=52
11170   !=^SocketCall
11180   -a
11190 ]
11200 :
11210 :-------------------------------------------------
11220 :sys_socketpair
11230 : enter   c:引数配列名を代入
11240 :         c;0]=family, c;1]=type,
11250 :         c;2]=protocol, c;3]=usockvec[2]
11260 : return  r
11270 :-------------------------------------------------
11280 ^SocketPair
11290   +a
11300   a=53
11310   !=^SocketCall
11320   -a
11330 ]
11340 :
11350 :-------------------------------------------------
11360 :sys_send
11370 : enter   c:引数配列名を代入
11380 :         c;0]=fd, c;1]=void * buff,
11390 :         c;2]=size_t len,  c;3]=uint flags
11400 : return  r
11410 :-------------------------------------------------
11420 ^Send
11430   c;4]=0 c;5]=0
11440   !=^SendTo
11450 ]
11460 :
11470 :-------------------------------------------------
11480 :sys_recv
11490 : enter   c:引数配列名を代入
11500 :         c;0]=fd, c;1]=void * ubuf,
11510 :         c;2]=size_t size, c;3]=uint flags
11520 : return  r
11530 :-------------------------------------------------
11540 ^Recv
11550   c;4]=0 c;5]=0
11560   !=^RecvFrom
11570 ]
11580 :
11590 :-------------------------------------------------
11600 :sys_sendto
11610 : enter   c:引数配列名を代入
11620 :         c;0]=fd, c;1]=void * buff,
11630 :         c;2]=size_t len,  c;3]=uint flags,
11640 :         c;4]=sockaddr *addr, c;5]=addr_len
11650 : return  r
11660 :-------------------------------------------------
11670 ^SendTo
11680   +a
11690   a=44
11700   !=^SocketCall
11710   -a
11720 ]
11730 :
11740 :-------------------------------------------------
11750 :sys_recvfrom
11760 : enter   c:引数配列名を代入
11770 :         c;0]=fd, c;1]=void * ubuf,
11780 :         c;2]=size_t size, c;3]=uint flags,
11790 :         c;4]=sockaddr *addr, c;5]=*addr_len
11800 : return  r
11810 :-------------------------------------------------
11820 ^RecvFrom
11830   +a
11840   a=45
11850   !=^SocketCall
11860   -a
11870 ]
11880 :
11890 :-------------------------------------------------
11900 :sys_shutdown
11910 : enter   c:引数配列名を代入
11920 :         c;0]=fd, c;1]=how
11930 : return  r
11940 :-------------------------------------------------
11950 ^Shutdown
11960   +a
11970   a=48
11980   !=^SocketCall
11990   -a
12000 ]
12010 :
12020 :-------------------------------------------------
12030 :sys_setsockopt
12040 : enter   c:引数配列名を代入
12050 :         c;0]=fd, c;1]=level, c;2]=optname,
12060 :         c;3]=char *optval, c;4]=optlen
12070 : return  r
12080 :-------------------------------------------------
12090 ^SetSockopt
12100   +a
12110   a=54
12120   !=^SocketCall
12130   -a
12140 ]
12150 :
12160 :-------------------------------------------------
12170 :sys_getsockopt
12180 : enter   c:引数配列名を代入
12190 :         c;0]=fd, c;1]=level, c;2]=optname,
12200 :         c;3]=char *optval, c;4]=*optlen
12210 : return  r
12220 :-------------------------------------------------
12230 ^GetSockopt
12240   +a
12250   a=55
12260   !=^SocketCall
12270   -a
12280 ]
12290 :
12300 :-------------------------------------------------
12310 :sys_sendmsg
12320 : enter   c:引数配列名を代入
12330 :         c;0]=fd, c;1]=msghdr *msg,
12340 :         c;2]=uint flags
12350 : return  r
12360 :-------------------------------------------------
12370 ^SendMsg
12380   +a
12390   a=46
12400   !=^SocketCall
12410   -a
12420 ]
12430 :
12440 :-------------------------------------------------
12450 : sys_recvmsg
12460 : enter   c:引数配列名を代入
12470 :         c;0]=fd, c;1]=msghdr *msg,
12480 :         c;2]=uint flags
12490 : return  r
12500 :-------------------------------------------------
12510 ^RecvMsg
12520   +a
12530   a=47
12540   !=^SocketCall
12550   -a
12560 ]
12570 :
12580 :=================================================
12590 : Network Utility
12600 :=================================================
12610 :-------------------------------------------------
12620 : select
12630 : enter   f : file descriptor
12640 :         t : t;0]=sec, t;1]=usec
12650 : return  r : contents
12660 :-------------------------------------------------
12670 ^Select
12680   +uvxyzabcdefi
12690   u=z z=z+128
12700   i=0,15 u;i]=0 @=i+1 : FD_ZERO
12710   x=f/64  y=1<<%
12720   u;x]=u;x]|y
12730   b=f+1     : fd + 1 の値を渡す
12740   c=u       : fd_set
12750   d=0
12760   e=0
12770   f=t       : timeval
12780   |ve
12790   a=23      : sys_select
12800   |zz
12810   r=|
12820   -ifedcbazyxvu
12830 ]
12840 :
12850 :-------------------------------------------------
12860 : CheckRead
12870 : enter   f : file descriptor
12880 :         t : sec (timeout)
12890 :         u : msec (timeout)
12900 : return  r : contents
12910 :-------------------------------------------------
12920 ^CheckRead
12930   +ztm
12940   m=u*1000    : msec
12950   t=z z=z+16
12960   t;0]=t      : sec
12970   t;1]=m      : usec
12980   !=^Select
12990   -mtz
13000 ]
13010 :
13020 :-------------------------------------------------
13030 : ReadWait
13040 : enter   f : file descriptor
13050 : return  r : contents
13060 :-------------------------------------------------
13070 ^ReadWait
13080   +tu
13090   t=0     : 0sec
13100   u=500   : 500msec
13110   !=^CheckRead
13120   -ut
13130 ]
13140 :
13150 :-------------------------------------------------
13160 : ReadWait5s
13170 : enter   f : file descriptor
13180 : return  r : contents
13190 :-------------------------------------------------
13200 ^ReadWait5s
13210   +zt
13220   t=z z=z+16
13230   t;0]=5      : sec
13240   t;1]=0      : usec
13250   !=^Select
13260   -tz
13270 ]
13280 :
13290 :-------------------------------------------------
13300 : IPアドレス文字列から NetworkOrder の32bit整数
13310 : in  s : IPアドレス文字列のバッファ先頭アドレス
13320 : out r : 32ビット整数のIPアドレス(big endian)
13330 :-------------------------------------------------
13340 ^inet_ntoa
13350   +zij
13360   r=0
13370   i=0
13380   @
13390     j=0 r=r<<8
13400     @
13410       j=j*10+(s(i)-$30)
13420       i=i+1
13430     @=((s(i)='.')|(s(i)=0))
13440     r=r|(j&$FF)
13450     ;=(s(i)='.') i=i+1
13460   @=(s(i)=0)
13470   -jiz
13480 ]
13490 :
13500 :-------------------------------------------------
13510 : 数値 --> 10進数文字列変換
13520 :
13530 : a の数値を文字列に変換して s からの領域に
13540 : 文字列として返す。
13550 : r に文字数を返す
13560 :-------------------------------------------------
13570 ^itoa
13580     +aij
13590     i=0
13600     @
13610       a=a/10 +=%  : スタックにプッシュ
13620       i=i+1
13630     @=(a=0)
13640     j=0
13650     @
13660       i=i-1
13670       s(j)=;+$30  : スタックからポップ
13680       j=j+1
13690     @=(i=0)
13700     s(j)=0
13710     r=j
13720     -jia
13730 ]
13740 :
13750 :-------------------------------------------------
13760 : NetworkOrder の32bit整数からIPアドレス文字列
13770 : in  s : バッファ先頭アドレス
13780 : in  a : 32ビット整数のIPアドレス
13790 : out s : IPアドレス文字列
13800 :-------------------------------------------------
13810 ^inet_aton
13820   +sabcde
13830   b=a>>24
13840   c=(a>>16)&$FF
13850   d=(a>>8)&$FF
13860   e=a&$FF
13870   a=b !=^itoa
13880   s(r)='.'
13890   a=c s=s+r+1 !=^itoa
13900   s(r)='.'
13910   a=d s=s+r+1 !=^itoa
13920   s(r)='.'
13930   a=e s=s+r+1 !=^itoa
13940   s(r)=0
13950   -edcbas
13960 ]
13970 :
13980 :-------------------------------------------------
13990 : 2バイト整数のエンディアンを反転、上位桁はゼロ
14000 : in  : r
14010 : out : r
14020 :-------------------------------------------------
14030 ^ConvEndian2
14040   +n
14050   r=r&$ffff
14060   n=r>>8
14070   r=r<<8&$ff00
14080   r=r|n
14090   -n
14100 ]
14110 :
14120 :-------------------------------------------------
14130 : 4バイト整数のエンディアンを反転
14140 : in  : r
14150 : out : r
14160 :-------------------------------------------------
14170 ^ConvEndian4
14180   +nm
14190   n=r>>16
14200   r=r&$ffff
14210   !=^ConvEndian2
14220   m=r<<16
14230   r=n
14240   !=^ConvEndian2
14250   r=m|r
14260   -mn
14270 ]
14280 :
14290  :-------------------------------------------------
14300 :socket (TCP)
14310 : return  r : fd, negative(error)
14320 :-------------------------------------------------
14330 ^SocketTCP
14340   +cz
14350   c=z z=z+48
14360   c;0]=2   : AF_INET
14370   c;1]=1   : SOCK_STREAM
14380   c;2]=0   : TCP(6)
14390   !=^Socket
14400   -zc
14410 ]
14420 :
14430 :-------------------------------------------------
14440 :socket (UDP)
14450 : return  r : fd, negative(error)
14460 :-------------------------------------------------
14470 ^SocketUDP
14480   +cz
14490   c=z z=z+48
14500   c;0]=2   : AF_INET
14510   c;1]=2   : SOCK_DGRAM
14520   c;2]=17  : UDP
14530   !=^Socket
14540   -zc
14550 ]
14560 :
14570 :-------------------------------------------------
14580 :SockAddr
14590 : enter   s : sockaddr 領域確保済みのこと
14600 :         p : port
14610 :         a : ipaddress
14620 :
14630 :    +---+---+---+---+---+---+---+---+-------+
14640 :    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 -15 |
14650 :    +---+---+---+---+---+---+---+---+-------+
14660 :    |family |  port |   address     | all 0 |
14670 :    +---+---+---+---+---+---+---+---+-------+
14680 :     s{0}     s{1}        s[1]
14690 :
14700 : return  r :
14710 :         s : sockaddr
14720 :-------------------------------------------------
14730 ^SockAddr
14740   +iar
14750   i=0,3 s[i]=0 @=i+1
14760   s{0}=2   : AF_INET
14770   r=p
14780   !=^ConvEndian2
14790   s{1}=r   : port
14800   r=a
14810   !=^ConvEndian4
14820   s[1]=r   : address
14830   -rai
14840 ]
14850 
14860 :-------------------------------------------------
14870 :bind IP
14880 : enter   f : socket descripter
14890 :         p : port
14900 :         a : ipaddress (Network Order)
14910 : return  r
14920 :-------------------------------------------------
14930 ^BindIP
14940   +szci
14950   c=z z=z+48
14960   s=z z=z+16
14970   !=^SockAddr
14980   c;0]=f   : fd
14990   c;1]=s
15000   c;2]=16  : length of 2+14 in bytes
15010   !=^Bind
15020   -iczs
15030 ]
15040 :
15050 :-------------------------------------------------
15060 :connect IP
15070 : enter   f : socket descripter
15080 :         p : port
15090 :         a : ipaddress (Network Order)
15100 : return  r
15110 :-------------------------------------------------
15120 ^ConnectIP
15130   +szci
15140   c=z z=z+48
15150   s=z z=z+16
15160   !=^SockAddr
15170   c;0]=f   : fd
15180   c;1]=s
15190   c;2]=16  : length of 2+14 in bytes
15200   !=^Connect
15210   -iczs
15220 ]
15230 :
15240 :-------------------------------------------------
15250 :send buffer
15260 : enter   f : socket fd
15270 :         t : string buffer
15280 : return  r
15290 :-------------------------------------------------
15300 ^SendBuffer
15310   +zc
15320   c=z z=z+48
15330   c;0]=f   : fd
15340   c;1]=t   : buffer
15350   t*=t     : get length
15360   c;2]=%   : length
15370   c;3]=0   : MSG_* flags
15380   !=^Send
15390   -cz
15400 ]
15410 :
15420 :-------------------------------------------------
15430 :send CRLF
15440 : enter   f : socket fd
15450 : return  r
15460 :-------------------------------------------------
15470 ^SendCRLF
15480   +zt
15490   t=z z=z+3
15500   t(0)=13
15510   t(1)=10
15520   t(2)=0
15530   !=^SendBuffer
15540   -tz
15550 ]
15560 :
15570 :-------------------------------------------------
15580 :recv buffer
15590 : enter   f : socket fd
15600 :         b : string buffer
15610 :         n : buffer size
15620 : return  r : length
15630 :-------------------------------------------------
15640 ^RecvBuffer
15650   +zc
15660   c=z z=z+48
15670   c;0]=f   : fd
15680   c;1]=b   : buffer
15690   c;2]=n   : buffer size
15700   c;3]=0   : MSG_* flags
15710   !=^Recv
15720   b(r)=0   : 受信データ末に0を追加
15730   -cz
15740 ]
15750 :
15760 :-------------------------------------------------
15770 : SendToBuffer
15780 : enter   f : socket fd
15790 :         t : buffer
15800 :         u : buffer length
15810 :         d : ip string
15820 :         p : port
15830 : return  r
15840 :-------------------------------------------------
15850 ^SendToBuf
15860   +saz
15870   s=d
15880   !=^inet_ntoa  : 文字列をIP整数に変換
15890   a=r
15900   s=z z=z+16
15910   !=^SockAddr
15920   c;0]=f
15930   c;1]=t
15940   c;2]=u
15950   c;3]=0
15960   c;4]=s
15970   c;5]=16
15980   !=^SendTo
15990   -zas
16000 ]
16010 :
16020 :-------------------------------------------------
16030 : RecvFromBuffer
16040 : enter   f : socket fd
16050 :         t : buffer
16060 :         u : buffer length
16070 :         d : ip string
16080 :         p : port
16090 : return  r
16100 :-------------------------------------------------
16110 ^RecvFromBuf
16120   +sazn
16130   n=z z=z+4
16140   s=d
16150   !=^inet_ntoa  : 文字列をIP整数に変換
16160   a=r
16170   s=z z=z+16
16180   n[0]=16
16190   !=^SockAddr
16200   c;0]=f
16210   c;1]=t
16220   c;2]=u
16230   c;3]=0
16240   c;4]=s
16250   c;5]=n
16260   !=^RecvFrom
16270   -nzas
16280 ]
16290 :
16300 
